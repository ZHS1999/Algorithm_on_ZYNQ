// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module output_write (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_Output_r_AWVALID,
        m_axi_Output_r_AWREADY,
        m_axi_Output_r_AWADDR,
        m_axi_Output_r_AWID,
        m_axi_Output_r_AWLEN,
        m_axi_Output_r_AWSIZE,
        m_axi_Output_r_AWBURST,
        m_axi_Output_r_AWLOCK,
        m_axi_Output_r_AWCACHE,
        m_axi_Output_r_AWPROT,
        m_axi_Output_r_AWQOS,
        m_axi_Output_r_AWREGION,
        m_axi_Output_r_AWUSER,
        m_axi_Output_r_WVALID,
        m_axi_Output_r_WREADY,
        m_axi_Output_r_WDATA,
        m_axi_Output_r_WSTRB,
        m_axi_Output_r_WLAST,
        m_axi_Output_r_WID,
        m_axi_Output_r_WUSER,
        m_axi_Output_r_ARVALID,
        m_axi_Output_r_ARREADY,
        m_axi_Output_r_ARADDR,
        m_axi_Output_r_ARID,
        m_axi_Output_r_ARLEN,
        m_axi_Output_r_ARSIZE,
        m_axi_Output_r_ARBURST,
        m_axi_Output_r_ARLOCK,
        m_axi_Output_r_ARCACHE,
        m_axi_Output_r_ARPROT,
        m_axi_Output_r_ARQOS,
        m_axi_Output_r_ARREGION,
        m_axi_Output_r_ARUSER,
        m_axi_Output_r_RVALID,
        m_axi_Output_r_RREADY,
        m_axi_Output_r_RDATA,
        m_axi_Output_r_RLAST,
        m_axi_Output_r_RID,
        m_axi_Output_r_RUSER,
        m_axi_Output_r_RRESP,
        m_axi_Output_r_BVALID,
        m_axi_Output_r_BREADY,
        m_axi_Output_r_BRESP,
        m_axi_Output_r_BID,
        m_axi_Output_r_BUSER,
        Output_offset,
        TR,
        TC,
        TM,
        offset,
        write_flag,
        half,
        output_buffer_0_address0,
        output_buffer_0_ce0,
        output_buffer_0_q0,
        output_buffer_1_address0,
        output_buffer_1_ce0,
        output_buffer_1_q0,
        output_buffer_2_address0,
        output_buffer_2_ce0,
        output_buffer_2_q0,
        output_buffer_3_address0,
        output_buffer_3_ce0,
        output_buffer_3_q0,
        output_buffer_4_address0,
        output_buffer_4_ce0,
        output_buffer_4_q0,
        output_buffer_5_address0,
        output_buffer_5_ce0,
        output_buffer_5_q0,
        output_buffer_6_address0,
        output_buffer_6_ce0,
        output_buffer_6_q0,
        output_buffer_7_address0,
        output_buffer_7_ce0,
        output_buffer_7_q0,
        output_buffer_8_address0,
        output_buffer_8_ce0,
        output_buffer_8_q0,
        output_buffer_9_address0,
        output_buffer_9_ce0,
        output_buffer_9_q0,
        output_buffer_10_address0,
        output_buffer_10_ce0,
        output_buffer_10_q0,
        output_buffer_11_address0,
        output_buffer_11_ce0,
        output_buffer_11_q0,
        output_buffer_12_address0,
        output_buffer_12_ce0,
        output_buffer_12_q0,
        output_buffer_13_address0,
        output_buffer_13_ce0,
        output_buffer_13_q0,
        output_buffer_14_address0,
        output_buffer_14_ce0,
        output_buffer_14_q0,
        output_buffer_15_address0,
        output_buffer_15_ce0,
        output_buffer_15_q0,
        output_buffer_16_address0,
        output_buffer_16_ce0,
        output_buffer_16_q0,
        output_buffer_17_address0,
        output_buffer_17_ce0,
        output_buffer_17_q0,
        output_buffer_18_address0,
        output_buffer_18_ce0,
        output_buffer_18_q0,
        output_buffer_19_address0,
        output_buffer_19_ce0,
        output_buffer_19_q0,
        output_buffer_20_address0,
        output_buffer_20_ce0,
        output_buffer_20_q0,
        output_buffer_21_address0,
        output_buffer_21_ce0,
        output_buffer_21_q0,
        output_buffer_22_address0,
        output_buffer_22_ce0,
        output_buffer_22_q0,
        output_buffer_23_address0,
        output_buffer_23_ce0,
        output_buffer_23_q0,
        output_buffer_24_address0,
        output_buffer_24_ce0,
        output_buffer_24_q0,
        output_buffer_25_address0,
        output_buffer_25_ce0,
        output_buffer_25_q0,
        output_buffer_26_address0,
        output_buffer_26_ce0,
        output_buffer_26_q0,
        output_buffer_27_address0,
        output_buffer_27_ce0,
        output_buffer_27_q0,
        output_buffer_28_address0,
        output_buffer_28_ce0,
        output_buffer_28_q0,
        output_buffer_29_address0,
        output_buffer_29_ce0,
        output_buffer_29_q0,
        output_buffer_30_address0,
        output_buffer_30_ce0,
        output_buffer_30_q0,
        output_buffer_31_address0,
        output_buffer_31_ce0,
        output_buffer_31_q0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_pp0_stage0 = 14'd16;
parameter    ap_ST_fsm_pp0_stage1 = 14'd32;
parameter    ap_ST_fsm_state8 = 14'd64;
parameter    ap_ST_fsm_state9 = 14'd128;
parameter    ap_ST_fsm_pp1_stage0 = 14'd256;
parameter    ap_ST_fsm_state13 = 14'd512;
parameter    ap_ST_fsm_state14 = 14'd1024;
parameter    ap_ST_fsm_state15 = 14'd2048;
parameter    ap_ST_fsm_state16 = 14'd4096;
parameter    ap_ST_fsm_state17 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_Output_r_AWVALID;
input   m_axi_Output_r_AWREADY;
output  [31:0] m_axi_Output_r_AWADDR;
output  [0:0] m_axi_Output_r_AWID;
output  [31:0] m_axi_Output_r_AWLEN;
output  [2:0] m_axi_Output_r_AWSIZE;
output  [1:0] m_axi_Output_r_AWBURST;
output  [1:0] m_axi_Output_r_AWLOCK;
output  [3:0] m_axi_Output_r_AWCACHE;
output  [2:0] m_axi_Output_r_AWPROT;
output  [3:0] m_axi_Output_r_AWQOS;
output  [3:0] m_axi_Output_r_AWREGION;
output  [0:0] m_axi_Output_r_AWUSER;
output   m_axi_Output_r_WVALID;
input   m_axi_Output_r_WREADY;
output  [31:0] m_axi_Output_r_WDATA;
output  [3:0] m_axi_Output_r_WSTRB;
output   m_axi_Output_r_WLAST;
output  [0:0] m_axi_Output_r_WID;
output  [0:0] m_axi_Output_r_WUSER;
output   m_axi_Output_r_ARVALID;
input   m_axi_Output_r_ARREADY;
output  [31:0] m_axi_Output_r_ARADDR;
output  [0:0] m_axi_Output_r_ARID;
output  [31:0] m_axi_Output_r_ARLEN;
output  [2:0] m_axi_Output_r_ARSIZE;
output  [1:0] m_axi_Output_r_ARBURST;
output  [1:0] m_axi_Output_r_ARLOCK;
output  [3:0] m_axi_Output_r_ARCACHE;
output  [2:0] m_axi_Output_r_ARPROT;
output  [3:0] m_axi_Output_r_ARQOS;
output  [3:0] m_axi_Output_r_ARREGION;
output  [0:0] m_axi_Output_r_ARUSER;
input   m_axi_Output_r_RVALID;
output   m_axi_Output_r_RREADY;
input  [31:0] m_axi_Output_r_RDATA;
input   m_axi_Output_r_RLAST;
input  [0:0] m_axi_Output_r_RID;
input  [0:0] m_axi_Output_r_RUSER;
input  [1:0] m_axi_Output_r_RRESP;
input   m_axi_Output_r_BVALID;
output   m_axi_Output_r_BREADY;
input  [1:0] m_axi_Output_r_BRESP;
input  [0:0] m_axi_Output_r_BID;
input  [0:0] m_axi_Output_r_BUSER;
input  [29:0] Output_offset;
input  [31:0] TR;
input  [31:0] TC;
input  [31:0] TM;
input  [31:0] offset;
input   write_flag;
input   half;
output  [9:0] output_buffer_0_address0;
output   output_buffer_0_ce0;
input  [31:0] output_buffer_0_q0;
output  [9:0] output_buffer_1_address0;
output   output_buffer_1_ce0;
input  [31:0] output_buffer_1_q0;
output  [9:0] output_buffer_2_address0;
output   output_buffer_2_ce0;
input  [31:0] output_buffer_2_q0;
output  [9:0] output_buffer_3_address0;
output   output_buffer_3_ce0;
input  [31:0] output_buffer_3_q0;
output  [9:0] output_buffer_4_address0;
output   output_buffer_4_ce0;
input  [31:0] output_buffer_4_q0;
output  [9:0] output_buffer_5_address0;
output   output_buffer_5_ce0;
input  [31:0] output_buffer_5_q0;
output  [9:0] output_buffer_6_address0;
output   output_buffer_6_ce0;
input  [31:0] output_buffer_6_q0;
output  [9:0] output_buffer_7_address0;
output   output_buffer_7_ce0;
input  [31:0] output_buffer_7_q0;
output  [9:0] output_buffer_8_address0;
output   output_buffer_8_ce0;
input  [31:0] output_buffer_8_q0;
output  [9:0] output_buffer_9_address0;
output   output_buffer_9_ce0;
input  [31:0] output_buffer_9_q0;
output  [9:0] output_buffer_10_address0;
output   output_buffer_10_ce0;
input  [31:0] output_buffer_10_q0;
output  [9:0] output_buffer_11_address0;
output   output_buffer_11_ce0;
input  [31:0] output_buffer_11_q0;
output  [9:0] output_buffer_12_address0;
output   output_buffer_12_ce0;
input  [31:0] output_buffer_12_q0;
output  [9:0] output_buffer_13_address0;
output   output_buffer_13_ce0;
input  [31:0] output_buffer_13_q0;
output  [9:0] output_buffer_14_address0;
output   output_buffer_14_ce0;
input  [31:0] output_buffer_14_q0;
output  [9:0] output_buffer_15_address0;
output   output_buffer_15_ce0;
input  [31:0] output_buffer_15_q0;
output  [9:0] output_buffer_16_address0;
output   output_buffer_16_ce0;
input  [31:0] output_buffer_16_q0;
output  [9:0] output_buffer_17_address0;
output   output_buffer_17_ce0;
input  [31:0] output_buffer_17_q0;
output  [9:0] output_buffer_18_address0;
output   output_buffer_18_ce0;
input  [31:0] output_buffer_18_q0;
output  [9:0] output_buffer_19_address0;
output   output_buffer_19_ce0;
input  [31:0] output_buffer_19_q0;
output  [9:0] output_buffer_20_address0;
output   output_buffer_20_ce0;
input  [31:0] output_buffer_20_q0;
output  [9:0] output_buffer_21_address0;
output   output_buffer_21_ce0;
input  [31:0] output_buffer_21_q0;
output  [9:0] output_buffer_22_address0;
output   output_buffer_22_ce0;
input  [31:0] output_buffer_22_q0;
output  [9:0] output_buffer_23_address0;
output   output_buffer_23_ce0;
input  [31:0] output_buffer_23_q0;
output  [9:0] output_buffer_24_address0;
output   output_buffer_24_ce0;
input  [31:0] output_buffer_24_q0;
output  [9:0] output_buffer_25_address0;
output   output_buffer_25_ce0;
input  [31:0] output_buffer_25_q0;
output  [9:0] output_buffer_26_address0;
output   output_buffer_26_ce0;
input  [31:0] output_buffer_26_q0;
output  [9:0] output_buffer_27_address0;
output   output_buffer_27_ce0;
input  [31:0] output_buffer_27_q0;
output  [9:0] output_buffer_28_address0;
output   output_buffer_28_ce0;
input  [31:0] output_buffer_28_q0;
output  [9:0] output_buffer_29_address0;
output   output_buffer_29_ce0;
input  [31:0] output_buffer_29_q0;
output  [9:0] output_buffer_30_address0;
output   output_buffer_30_ce0;
input  [31:0] output_buffer_30_q0;
output  [9:0] output_buffer_31_address0;
output   output_buffer_31_ce0;
input  [31:0] output_buffer_31_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_Output_r_AWVALID;
reg m_axi_Output_r_WVALID;
reg m_axi_Output_r_BREADY;
reg output_buffer_0_ce0;
reg output_buffer_1_ce0;
reg output_buffer_2_ce0;
reg output_buffer_3_ce0;
reg output_buffer_4_ce0;
reg output_buffer_5_ce0;
reg output_buffer_6_ce0;
reg output_buffer_7_ce0;
reg output_buffer_8_ce0;
reg output_buffer_9_ce0;
reg output_buffer_10_ce0;
reg output_buffer_11_ce0;
reg output_buffer_12_ce0;
reg output_buffer_13_ce0;
reg output_buffer_14_ce0;
reg output_buffer_15_ce0;
reg output_buffer_16_ce0;
reg output_buffer_17_ce0;
reg output_buffer_18_ce0;
reg output_buffer_19_ce0;
reg output_buffer_20_ce0;
reg output_buffer_21_ce0;
reg output_buffer_22_ce0;
reg output_buffer_23_ce0;
reg output_buffer_24_ce0;
reg output_buffer_25_ce0;
reg output_buffer_26_ce0;
reg output_buffer_27_ce0;
reg output_buffer_28_ce0;
reg output_buffer_29_ce0;
reg output_buffer_30_ce0;
reg output_buffer_31_ce0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [12:0] output_tmp_buffer_address0;
reg    output_tmp_buffer_ce0;
reg    output_tmp_buffer_we0;
wire   [31:0] output_tmp_buffer_q0;
reg    Output_r_blk_n_AW;
wire    ap_CS_fsm_state9;
reg    Output_r_blk_n_W;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond_reg_1767;
reg   [0:0] exitcond_reg_1767_pp1_iter1_reg;
reg    Output_r_blk_n_B;
wire    ap_CS_fsm_state17;
wire   [0:0] half_read_read_fu_230_p2;
wire   [0:0] write_flag_read_read_fu_236_p2;
reg   [95:0] indvar_flatten4_reg_725;
reg   [30:0] tm_reg_736;
reg   [31:0] output_tmp_offset_reg_747;
reg   [63:0] indvar_flatten_reg_758;
reg   [30:0] tr_reg_769;
reg   [31:0] output_tmp_offset_1_reg_780;
reg   [30:0] tc_reg_791;
reg   [31:0] output_tmp_offset_2_reg_802;
reg   [13:0] indvar_reg_915;
wire   [31:0] Output_offset_cast_fu_926_p1;
reg   [31:0] Output_offset_cast_reg_1457;
wire   [31:0] TR_assign_fu_978_p3;
reg   [31:0] TR_assign_reg_1462;
wire   [30:0] tmp_180_fu_986_p1;
reg   [30:0] tmp_180_reg_1468;
wire   [31:0] TC_assign_fu_1038_p3;
reg   [31:0] TC_assign_reg_1473;
wire   [30:0] tmp_182_fu_1046_p1;
reg   [30:0] tmp_182_reg_1480;
wire   [30:0] offset_assign_fu_1098_p3;
reg   [30:0] offset_assign_reg_1485;
wire   [30:0] smax1_fu_1111_p3;
reg   [30:0] smax1_reg_1490;
wire    ap_CS_fsm_state2;
wire   [63:0] bound_fu_1124_p2;
reg   [63:0] bound_reg_1495;
wire   [0:0] tmp_fu_1130_p2;
reg   [0:0] tmp_reg_1501;
wire    ap_CS_fsm_state3;
wire   [31:0] smax_cast_fu_1153_p1;
reg   [31:0] smax_cast_reg_1517;
wire    ap_CS_fsm_state4;
wire   [31:0] tmp_30_fu_1160_p2;
reg   [31:0] tmp_30_reg_1522;
wire   [95:0] grp_fu_1141_p2;
reg   [95:0] bound4_reg_1527;
wire   [0:0] exitcond_flatten4_fu_1175_p2;
reg   [0:0] exitcond_flatten4_reg_1532;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [95:0] indvar_flatten_next4_fu_1180_p2;
reg   [95:0] indvar_flatten_next4_reg_1536;
reg    ap_enable_reg_pp0_iter0;
wire   [30:0] tm_t_mid2_v_fu_1234_p3;
reg   [30:0] tm_t_mid2_v_reg_1541;
wire   [4:0] tmp_184_fu_1242_p1;
reg   [4:0] tmp_184_reg_1546;
wire   [31:0] output_tmp_offset_mi_fu_1253_p3;
reg   [31:0] output_tmp_offset_mi_reg_1550;
wire   [30:0] tc_mid2_fu_1272_p3;
reg   [30:0] tc_mid2_reg_1555;
wire  signed [31:0] output_tmp_offset_2_1_fu_1280_p3;
reg  signed [31:0] output_tmp_offset_2_1_reg_1560;
wire   [30:0] tr_mid2_fu_1320_p3;
reg   [30:0] tr_mid2_reg_1566;
wire   [31:0] output_tmp_offset_1_1_fu_1328_p3;
reg   [31:0] output_tmp_offset_1_1_reg_1571;
wire   [11:0] tmp_106_fu_1340_p2;
reg   [11:0] tmp_106_reg_1576;
wire   [63:0] indvar_flatten_next_fu_1352_p3;
reg   [63:0] indvar_flatten_next_reg_1581;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state6_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] tmp_39_fu_1395_p2;
reg   [31:0] tmp_39_reg_1746;
wire   [30:0] tc_3_fu_1400_p2;
reg   [30:0] tc_3_reg_1751;
wire   [31:0] sum_fu_1412_p2;
reg   [31:0] sum_reg_1756;
wire    ap_CS_fsm_state8;
reg    ap_sig_ioackin_m_axi_Output_r_AWREADY;
wire   [0:0] exitcond_fu_1427_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state10_pp1_stage0_iter0;
wire    ap_block_state11_pp1_stage0_iter1;
wire    ap_block_state12_pp1_stage0_iter2;
reg    ap_sig_ioackin_m_axi_Output_r_WREADY;
reg    ap_block_state12_io;
reg    ap_block_pp1_stage0_11001;
wire   [13:0] indvar_next_fu_1433_p2;
reg    ap_enable_reg_pp1_iter0;
reg   [31:0] output_tmp_buffer_lo_reg_1781;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state10;
reg   [95:0] ap_phi_mux_indvar_flatten4_phi_fu_729_p4;
wire    ap_block_pp0_stage0;
reg   [30:0] ap_phi_mux_tm_phi_fu_740_p4;
reg   [31:0] ap_phi_mux_output_tmp_offset_phi_fu_751_p4;
reg   [63:0] ap_phi_mux_indvar_flatten_phi_fu_762_p4;
reg   [30:0] ap_phi_mux_tr_phi_fu_773_p4;
reg   [31:0] ap_phi_mux_output_tmp_offset_1_phi_fu_784_p4;
reg   [30:0] ap_phi_mux_tc_phi_fu_795_p4;
reg   [31:0] ap_phi_mux_output_tmp_offset_2_phi_fu_806_p4;
reg   [31:0] ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64;
wire   [31:0] ap_phi_reg_pp0_iter1_UnifiedRetVal_i_reg_813;
wire   [63:0] tmp_117_cast_fu_1360_p1;
wire    ap_block_pp0_stage1;
wire  signed [63:0] tmp_38_fu_1405_p1;
wire   [63:0] indvar2_fu_1439_p1;
wire  signed [63:0] sum_cast_fu_1417_p1;
reg    ap_reg_ioackin_m_axi_Output_r_AWREADY;
reg    ap_predicate_op274_writeresp_state17;
reg    ap_block_state17;
reg    ap_reg_ioackin_m_axi_Output_r_WREADY;
wire    ap_block_pp1_stage0_01001;
wire   [31:0] p_neg1_fu_938_p2;
wire   [30:0] p_lshr1_fu_944_p4;
wire   [31:0] tmp_100_fu_954_p1;
wire   [30:0] p_lshr_f1_fu_964_p4;
wire   [0:0] tmp_179_fu_930_p3;
wire   [31:0] p_neg_t1_fu_958_p2;
wire   [31:0] tmp_101_fu_974_p1;
wire   [31:0] p_neg2_fu_998_p2;
wire   [30:0] p_lshr2_fu_1004_p4;
wire   [31:0] tmp_102_fu_1014_p1;
wire   [30:0] p_lshr_f2_fu_1024_p4;
wire   [0:0] tmp_181_fu_990_p3;
wire   [31:0] p_neg_t2_fu_1018_p2;
wire   [31:0] tmp_103_fu_1034_p1;
wire   [31:0] p_neg_fu_1058_p2;
wire   [29:0] tmp_104_fu_1064_p4;
wire   [30:0] p_lshr_cast_fu_1074_p1;
wire   [29:0] tmp_105_fu_1084_p4;
wire   [0:0] tmp_183_fu_1050_p3;
wire   [30:0] p_neg_t_fu_1078_p2;
wire   [30:0] p_lshr_f_cast_fu_1094_p1;
wire   [0:0] tmp_s_fu_1106_p2;
wire   [31:0] bound_fu_1124_p0;
wire   [31:0] bound_fu_1124_p1;
wire   [63:0] grp_fu_1141_p0;
wire   [31:0] grp_fu_1141_p1;
wire   [30:0] smax_fu_1147_p3;
wire   [30:0] tmp_30_fu_1160_p0;
wire   [30:0] tmp_30_fu_1160_p1;
wire   [31:0] tc_cast_fu_1166_p1;
wire   [0:0] exitcond_flatten_fu_1197_p2;
wire   [31:0] output_tmp_offset_3_s_fu_1192_p2;
wire   [30:0] tm_2_fu_1186_p2;
wire   [0:0] tmp_36_fu_1170_p2;
wire   [30:0] tr_mid_fu_1202_p3;
wire   [31:0] output_tmp_offset_1_s_fu_1210_p3;
wire   [0:0] tmp_36_mid_fu_1246_p3;
wire   [30:0] tc_mid_fu_1218_p3;
wire   [31:0] output_tmp_offset_2_s_fu_1226_p3;
wire   [31:0] tmp_34_dup_fu_1267_p2;
wire   [6:0] tmp_185_fu_1288_p1;
wire   [30:0] tr_3_fu_1261_p2;
wire   [6:0] tmp_186_fu_1292_p3;
wire   [6:0] tmp_187_fu_1300_p1;
wire   [6:0] tmp_188_fu_1304_p3;
wire   [11:0] tmp_189_fu_1336_p1;
wire   [11:0] tmp_116_cast_fu_1312_p3;
wire   [63:0] indvar_flatten_op_fu_1346_p2;
wire  signed [31:0] tmp_32_cast_fu_1409_p1;
reg   [13:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [63:0] bound_fu_1124_p00;
wire   [63:0] bound_fu_1124_p10;
wire   [95:0] grp_fu_1141_p00;
wire   [95:0] grp_fu_1141_p10;
wire   [31:0] tmp_30_fu_1160_p00;
wire   [31:0] tmp_30_fu_1160_p10;
reg    ap_condition_607;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_reg_ioackin_m_axi_Output_r_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_Output_r_WREADY = 1'b0;
end

output_write_outpkbM #(
    .DataWidth( 32 ),
    .AddressRange( 8192 ),
    .AddressWidth( 13 ))
output_tmp_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_tmp_buffer_address0),
    .ce0(output_tmp_buffer_ce0),
    .we0(output_tmp_buffer_we0),
    .d0(ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64),
    .q0(output_tmp_buffer_q0)
);

detection_acc_mulcud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 96 ))
detection_acc_mulcud_U502(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1141_p0),
    .din1(grp_fu_1141_p1),
    .ce(1'b1),
    .dout(grp_fu_1141_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((ap_sig_ioackin_m_axi_Output_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state10)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((ap_sig_ioackin_m_axi_Output_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_Output_r_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            if ((ap_sig_ioackin_m_axi_Output_r_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_Output_r_AWREADY <= 1'b0;
            end else if ((m_axi_Output_r_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_Output_r_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_Output_r_WREADY <= 1'b0;
    end else begin
        if (((exitcond_reg_1767_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
            if ((1'b0 == ap_block_pp1_stage0_11001)) begin
                ap_reg_ioackin_m_axi_Output_r_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp1_stage0_01001) & (m_axi_Output_r_WREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_Output_r_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_1532 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten4_reg_725 <= indvar_flatten_next4_reg_1536;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten4_reg_725 <= 96'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_1532 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_758 <= indvar_flatten_next_reg_1581;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten_reg_758 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_1427_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_reg_915 <= indvar_next_fu_1433_p2;
    end else if (((ap_sig_ioackin_m_axi_Output_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        indvar_reg_915 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_1532 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_tmp_offset_1_reg_780 <= output_tmp_offset_1_1_reg_1571;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_tmp_offset_1_reg_780 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_1532 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_tmp_offset_2_reg_802 <= tmp_39_reg_1746;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_tmp_offset_2_reg_802 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_1532 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_tmp_offset_reg_747 <= output_tmp_offset_mi_reg_1550;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_tmp_offset_reg_747 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_1532 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tc_reg_791 <= tc_3_reg_1751;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tc_reg_791 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_1532 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tm_reg_736 <= tm_t_mid2_v_reg_1541;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tm_reg_736 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_1532 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tr_reg_769 <= tr_mid2_reg_1566;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tr_reg_769 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Output_offset_cast_reg_1457[29 : 0] <= Output_offset_cast_fu_926_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((half_read_read_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        TC_assign_reg_1473 <= TC_assign_fu_1038_p3;
        TR_assign_reg_1462 <= TR_assign_fu_978_p3;
        offset_assign_reg_1485 <= offset_assign_fu_1098_p3;
        tmp_180_reg_1468 <= tmp_180_fu_986_p1;
        tmp_182_reg_1480 <= tmp_182_fu_1046_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bound4_reg_1527 <= grp_fu_1141_p2;
        smax_cast_reg_1517[30 : 0] <= smax_cast_fu_1153_p1[30 : 0];
        tmp_30_reg_1522 <= tmp_30_fu_1160_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_reg_1495 <= bound_fu_1124_p2;
        smax1_reg_1490 <= smax1_fu_1111_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten4_reg_1532 <= exitcond_flatten4_fu_1175_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_reg_1767 <= exitcond_fu_1427_p2;
        exitcond_reg_1767_pp1_iter1_reg <= exitcond_reg_1767;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_next4_reg_1536 <= indvar_flatten_next4_fu_1180_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_fu_1175_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_next_reg_1581 <= indvar_flatten_next_fu_1352_p3;
        output_tmp_offset_1_1_reg_1571 <= output_tmp_offset_1_1_fu_1328_p3;
        output_tmp_offset_mi_reg_1550 <= output_tmp_offset_mi_fu_1253_p3;
        tm_t_mid2_v_reg_1541 <= tm_t_mid2_v_fu_1234_p3;
        tr_mid2_reg_1566 <= tr_mid2_fu_1320_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_1767 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        output_tmp_buffer_lo_reg_1781 <= output_tmp_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_fu_1175_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_tmp_offset_2_1_reg_1560 <= output_tmp_offset_2_1_fu_1280_p3;
        tc_mid2_reg_1555 <= tc_mid2_fu_1272_p3;
        tmp_106_reg_1576 <= tmp_106_fu_1340_p2;
        tmp_184_reg_1546 <= tmp_184_fu_1242_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sum_reg_1756 <= sum_fu_1412_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_1532 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tc_3_reg_1751 <= tc_3_fu_1400_p2;
        tmp_39_reg_1746 <= tmp_39_fu_1395_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_reg_1501 <= tmp_fu_1130_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        Output_r_blk_n_AW = m_axi_Output_r_AWREADY;
    end else begin
        Output_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((half_read_read_fu_230_p2 == 1'd0) & (write_flag_read_read_fu_236_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        Output_r_blk_n_B = m_axi_Output_r_BVALID;
    end else begin
        Output_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_1767_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        Output_r_blk_n_W = m_axi_Output_r_WREADY;
    end else begin
        Output_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond_flatten4_fu_1175_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_1427_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if (((~((m_axi_Output_r_BVALID == 1'b0) & (ap_predicate_op274_writeresp_state17 == 1'b1)) & (1'b1 == ap_CS_fsm_state17)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_607)) begin
        if ((tmp_184_reg_1546 == 5'd31)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_31_q0;
        end else if ((tmp_184_reg_1546 == 5'd30)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_30_q0;
        end else if ((tmp_184_reg_1546 == 5'd29)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_29_q0;
        end else if ((tmp_184_reg_1546 == 5'd28)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_28_q0;
        end else if ((tmp_184_reg_1546 == 5'd27)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_27_q0;
        end else if ((tmp_184_reg_1546 == 5'd26)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_26_q0;
        end else if ((tmp_184_reg_1546 == 5'd25)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_25_q0;
        end else if ((tmp_184_reg_1546 == 5'd24)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_24_q0;
        end else if ((tmp_184_reg_1546 == 5'd23)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_23_q0;
        end else if ((tmp_184_reg_1546 == 5'd22)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_22_q0;
        end else if ((tmp_184_reg_1546 == 5'd21)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_21_q0;
        end else if ((tmp_184_reg_1546 == 5'd20)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_20_q0;
        end else if ((tmp_184_reg_1546 == 5'd19)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_19_q0;
        end else if ((tmp_184_reg_1546 == 5'd18)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_18_q0;
        end else if ((tmp_184_reg_1546 == 5'd17)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_17_q0;
        end else if ((tmp_184_reg_1546 == 5'd16)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_16_q0;
        end else if ((tmp_184_reg_1546 == 5'd15)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_15_q0;
        end else if ((tmp_184_reg_1546 == 5'd14)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_14_q0;
        end else if ((tmp_184_reg_1546 == 5'd13)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_13_q0;
        end else if ((tmp_184_reg_1546 == 5'd12)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_12_q0;
        end else if ((tmp_184_reg_1546 == 5'd11)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_11_q0;
        end else if ((tmp_184_reg_1546 == 5'd10)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_10_q0;
        end else if ((tmp_184_reg_1546 == 5'd9)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_9_q0;
        end else if ((tmp_184_reg_1546 == 5'd8)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_8_q0;
        end else if ((tmp_184_reg_1546 == 5'd7)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_7_q0;
        end else if ((tmp_184_reg_1546 == 5'd6)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_6_q0;
        end else if ((tmp_184_reg_1546 == 5'd5)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_5_q0;
        end else if ((tmp_184_reg_1546 == 5'd4)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_4_q0;
        end else if ((tmp_184_reg_1546 == 5'd3)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_3_q0;
        end else if ((tmp_184_reg_1546 == 5'd2)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_2_q0;
        end else if ((tmp_184_reg_1546 == 5'd1)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_1_q0;
        end else if ((tmp_184_reg_1546 == 5'd0)) begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = output_buffer_0_q0;
        end else begin
            ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = ap_phi_reg_pp0_iter1_UnifiedRetVal_i_reg_813;
        end
    end else begin
        ap_phi_mux_UnifiedRetVal_i_phi_fu_816_p64 = ap_phi_reg_pp0_iter1_UnifiedRetVal_i_reg_813;
    end
end

always @ (*) begin
    if (((exitcond_flatten4_reg_1532 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten4_phi_fu_729_p4 = indvar_flatten_next4_reg_1536;
    end else begin
        ap_phi_mux_indvar_flatten4_phi_fu_729_p4 = indvar_flatten4_reg_725;
    end
end

always @ (*) begin
    if (((exitcond_flatten4_reg_1532 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_762_p4 = indvar_flatten_next_reg_1581;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_762_p4 = indvar_flatten_reg_758;
    end
end

always @ (*) begin
    if (((exitcond_flatten4_reg_1532 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_output_tmp_offset_1_phi_fu_784_p4 = output_tmp_offset_1_1_reg_1571;
    end else begin
        ap_phi_mux_output_tmp_offset_1_phi_fu_784_p4 = output_tmp_offset_1_reg_780;
    end
end

always @ (*) begin
    if (((exitcond_flatten4_reg_1532 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_output_tmp_offset_2_phi_fu_806_p4 = tmp_39_reg_1746;
    end else begin
        ap_phi_mux_output_tmp_offset_2_phi_fu_806_p4 = output_tmp_offset_2_reg_802;
    end
end

always @ (*) begin
    if (((exitcond_flatten4_reg_1532 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_output_tmp_offset_phi_fu_751_p4 = output_tmp_offset_mi_reg_1550;
    end else begin
        ap_phi_mux_output_tmp_offset_phi_fu_751_p4 = output_tmp_offset_reg_747;
    end
end

always @ (*) begin
    if (((exitcond_flatten4_reg_1532 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_tc_phi_fu_795_p4 = tc_3_reg_1751;
    end else begin
        ap_phi_mux_tc_phi_fu_795_p4 = tc_reg_791;
    end
end

always @ (*) begin
    if (((exitcond_flatten4_reg_1532 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_tm_phi_fu_740_p4 = tm_t_mid2_v_reg_1541;
    end else begin
        ap_phi_mux_tm_phi_fu_740_p4 = tm_reg_736;
    end
end

always @ (*) begin
    if (((exitcond_flatten4_reg_1532 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_tr_phi_fu_773_p4 = tr_mid2_reg_1566;
    end else begin
        ap_phi_mux_tr_phi_fu_773_p4 = tr_reg_769;
    end
end

always @ (*) begin
    if ((~((m_axi_Output_r_BVALID == 1'b0) & (ap_predicate_op274_writeresp_state17 == 1'b1)) & (1'b1 == ap_CS_fsm_state17))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_Output_r_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_Output_r_AWREADY = m_axi_Output_r_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_Output_r_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_Output_r_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_Output_r_WREADY = m_axi_Output_r_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_Output_r_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_Output_r_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state9))) begin
        m_axi_Output_r_AWVALID = 1'b1;
    end else begin
        m_axi_Output_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_Output_r_BVALID == 1'b0) & (ap_predicate_op274_writeresp_state17 == 1'b1)) & (ap_predicate_op274_writeresp_state17 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        m_axi_Output_r_BREADY = 1'b1;
    end else begin
        m_axi_Output_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_1767_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_01001) & (ap_reg_ioackin_m_axi_Output_r_WREADY == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        m_axi_Output_r_WVALID = 1'b1;
    end else begin
        m_axi_Output_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_0_ce0 = 1'b1;
    end else begin
        output_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_10_ce0 = 1'b1;
    end else begin
        output_buffer_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_11_ce0 = 1'b1;
    end else begin
        output_buffer_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_12_ce0 = 1'b1;
    end else begin
        output_buffer_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_13_ce0 = 1'b1;
    end else begin
        output_buffer_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_14_ce0 = 1'b1;
    end else begin
        output_buffer_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_15_ce0 = 1'b1;
    end else begin
        output_buffer_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_16_ce0 = 1'b1;
    end else begin
        output_buffer_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_17_ce0 = 1'b1;
    end else begin
        output_buffer_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_18_ce0 = 1'b1;
    end else begin
        output_buffer_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_19_ce0 = 1'b1;
    end else begin
        output_buffer_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_1_ce0 = 1'b1;
    end else begin
        output_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_20_ce0 = 1'b1;
    end else begin
        output_buffer_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_21_ce0 = 1'b1;
    end else begin
        output_buffer_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_22_ce0 = 1'b1;
    end else begin
        output_buffer_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_23_ce0 = 1'b1;
    end else begin
        output_buffer_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_24_ce0 = 1'b1;
    end else begin
        output_buffer_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_25_ce0 = 1'b1;
    end else begin
        output_buffer_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_26_ce0 = 1'b1;
    end else begin
        output_buffer_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_27_ce0 = 1'b1;
    end else begin
        output_buffer_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_28_ce0 = 1'b1;
    end else begin
        output_buffer_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_29_ce0 = 1'b1;
    end else begin
        output_buffer_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_2_ce0 = 1'b1;
    end else begin
        output_buffer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_30_ce0 = 1'b1;
    end else begin
        output_buffer_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_31_ce0 = 1'b1;
    end else begin
        output_buffer_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_3_ce0 = 1'b1;
    end else begin
        output_buffer_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_4_ce0 = 1'b1;
    end else begin
        output_buffer_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_5_ce0 = 1'b1;
    end else begin
        output_buffer_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_6_ce0 = 1'b1;
    end else begin
        output_buffer_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_7_ce0 = 1'b1;
    end else begin
        output_buffer_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_8_ce0 = 1'b1;
    end else begin
        output_buffer_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_buffer_9_ce0 = 1'b1;
    end else begin
        output_buffer_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        output_tmp_buffer_address0 = indvar2_fu_1439_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_tmp_buffer_address0 = tmp_38_fu_1405_p1;
    end else begin
        output_tmp_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        output_tmp_buffer_ce0 = 1'b1;
    end else begin
        output_tmp_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten4_reg_1532 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_tmp_buffer_we0 = 1'b1;
    end else begin
        output_tmp_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((half_read_read_fu_230_p2 == 1'd0) & (write_flag_read_read_fu_236_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & ((write_flag_read_read_fu_236_p2 == 1'd0) | (half_read_read_fu_230_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten4_fu_1175_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten4_fu_1175_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((ap_sig_ioackin_m_axi_Output_r_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (exitcond_fu_1427_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (exitcond_fu_1427_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if ((~((m_axi_Output_r_BVALID == 1'b0) & (ap_predicate_op274_writeresp_state17 == 1'b1)) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Output_offset_cast_fu_926_p1 = Output_offset;

assign TC_assign_fu_1038_p3 = ((tmp_181_fu_990_p3[0:0] === 1'b1) ? p_neg_t2_fu_1018_p2 : tmp_103_fu_1034_p1);

assign TR_assign_fu_978_p3 = ((tmp_179_fu_930_p3[0:0] === 1'b1) ? p_neg_t1_fu_958_p2 : tmp_101_fu_974_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

assign ap_block_state10_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_io = ((exitcond_reg_1767_pp1_iter1_reg == 1'd0) & (ap_sig_ioackin_m_axi_Output_r_WREADY == 1'b0));
end

assign ap_block_state12_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17 = ((m_axi_Output_r_BVALID == 1'b0) & (ap_predicate_op274_writeresp_state17 == 1'b1));
end

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_607 = ((exitcond_flatten4_reg_1532 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_reg_pp0_iter1_UnifiedRetVal_i_reg_813 = 'bx;

always @ (*) begin
    ap_predicate_op274_writeresp_state17 = ((half_read_read_fu_230_p2 == 1'd0) & (write_flag_read_read_fu_236_p2 == 1'd1));
end

assign bound_fu_1124_p0 = bound_fu_1124_p00;

assign bound_fu_1124_p00 = TC_assign_reg_1473;

assign bound_fu_1124_p1 = bound_fu_1124_p10;

assign bound_fu_1124_p10 = TR_assign_reg_1462;

assign bound_fu_1124_p2 = (bound_fu_1124_p0 * bound_fu_1124_p1);

assign exitcond_flatten4_fu_1175_p2 = ((ap_phi_mux_indvar_flatten4_phi_fu_729_p4 == bound4_reg_1527) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_1197_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_762_p4 == bound_reg_1495) ? 1'b1 : 1'b0);

assign exitcond_fu_1427_p2 = ((indvar_reg_915 == 14'd8192) ? 1'b1 : 1'b0);

assign grp_fu_1141_p0 = grp_fu_1141_p00;

assign grp_fu_1141_p00 = bound_reg_1495;

assign grp_fu_1141_p1 = grp_fu_1141_p10;

assign grp_fu_1141_p10 = TM;

assign half_read_read_fu_230_p2 = half;

assign indvar2_fu_1439_p1 = indvar_reg_915;

assign indvar_flatten_next4_fu_1180_p2 = (ap_phi_mux_indvar_flatten4_phi_fu_729_p4 + 96'd1);

assign indvar_flatten_next_fu_1352_p3 = ((exitcond_flatten_fu_1197_p2[0:0] === 1'b1) ? 64'd1 : indvar_flatten_op_fu_1346_p2);

assign indvar_flatten_op_fu_1346_p2 = (ap_phi_mux_indvar_flatten_phi_fu_762_p4 + 64'd1);

assign indvar_next_fu_1433_p2 = (indvar_reg_915 + 14'd1);

assign m_axi_Output_r_ARADDR = 32'd0;

assign m_axi_Output_r_ARBURST = 2'd0;

assign m_axi_Output_r_ARCACHE = 4'd0;

assign m_axi_Output_r_ARID = 1'd0;

assign m_axi_Output_r_ARLEN = 32'd0;

assign m_axi_Output_r_ARLOCK = 2'd0;

assign m_axi_Output_r_ARPROT = 3'd0;

assign m_axi_Output_r_ARQOS = 4'd0;

assign m_axi_Output_r_ARREGION = 4'd0;

assign m_axi_Output_r_ARSIZE = 3'd0;

assign m_axi_Output_r_ARUSER = 1'd0;

assign m_axi_Output_r_ARVALID = 1'b0;

assign m_axi_Output_r_AWADDR = sum_cast_fu_1417_p1;

assign m_axi_Output_r_AWBURST = 2'd0;

assign m_axi_Output_r_AWCACHE = 4'd0;

assign m_axi_Output_r_AWID = 1'd0;

assign m_axi_Output_r_AWLEN = 32'd8192;

assign m_axi_Output_r_AWLOCK = 2'd0;

assign m_axi_Output_r_AWPROT = 3'd0;

assign m_axi_Output_r_AWQOS = 4'd0;

assign m_axi_Output_r_AWREGION = 4'd0;

assign m_axi_Output_r_AWSIZE = 3'd0;

assign m_axi_Output_r_AWUSER = 1'd0;

assign m_axi_Output_r_RREADY = 1'b0;

assign m_axi_Output_r_WDATA = output_tmp_buffer_lo_reg_1781;

assign m_axi_Output_r_WID = 1'd0;

assign m_axi_Output_r_WLAST = 1'b0;

assign m_axi_Output_r_WSTRB = 4'd15;

assign m_axi_Output_r_WUSER = 1'd0;

assign offset_assign_fu_1098_p3 = ((tmp_183_fu_1050_p3[0:0] === 1'b1) ? p_neg_t_fu_1078_p2 : p_lshr_f_cast_fu_1094_p1);

assign output_buffer_0_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_10_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_11_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_12_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_13_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_14_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_15_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_16_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_17_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_18_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_19_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_1_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_20_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_21_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_22_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_23_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_24_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_25_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_26_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_27_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_28_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_29_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_2_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_30_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_31_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_3_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_4_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_5_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_6_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_7_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_8_address0 = tmp_117_cast_fu_1360_p1;

assign output_buffer_9_address0 = tmp_117_cast_fu_1360_p1;

assign output_tmp_offset_1_1_fu_1328_p3 = ((tmp_36_mid_fu_1246_p3[0:0] === 1'b1) ? output_tmp_offset_1_s_fu_1210_p3 : tmp_34_dup_fu_1267_p2);

assign output_tmp_offset_1_s_fu_1210_p3 = ((exitcond_flatten_fu_1197_p2[0:0] === 1'b1) ? output_tmp_offset_3_s_fu_1192_p2 : ap_phi_mux_output_tmp_offset_1_phi_fu_784_p4);

assign output_tmp_offset_2_1_fu_1280_p3 = ((tmp_36_mid_fu_1246_p3[0:0] === 1'b1) ? output_tmp_offset_2_s_fu_1226_p3 : tmp_34_dup_fu_1267_p2);

assign output_tmp_offset_2_s_fu_1226_p3 = ((exitcond_flatten_fu_1197_p2[0:0] === 1'b1) ? output_tmp_offset_3_s_fu_1192_p2 : ap_phi_mux_output_tmp_offset_2_phi_fu_806_p4);

assign output_tmp_offset_3_s_fu_1192_p2 = (tmp_30_reg_1522 + ap_phi_mux_output_tmp_offset_phi_fu_751_p4);

assign output_tmp_offset_mi_fu_1253_p3 = ((exitcond_flatten_fu_1197_p2[0:0] === 1'b1) ? output_tmp_offset_3_s_fu_1192_p2 : ap_phi_mux_output_tmp_offset_phi_fu_751_p4);

assign p_lshr1_fu_944_p4 = {{p_neg1_fu_938_p2[31:1]}};

assign p_lshr2_fu_1004_p4 = {{p_neg2_fu_998_p2[31:1]}};

assign p_lshr_cast_fu_1074_p1 = tmp_104_fu_1064_p4;

assign p_lshr_f1_fu_964_p4 = {{TR[31:1]}};

assign p_lshr_f2_fu_1024_p4 = {{TC[31:1]}};

assign p_lshr_f_cast_fu_1094_p1 = tmp_105_fu_1084_p4;

assign p_neg1_fu_938_p2 = (32'd0 - TR);

assign p_neg2_fu_998_p2 = (32'd0 - TC);

assign p_neg_fu_1058_p2 = (32'd0 - offset);

assign p_neg_t1_fu_958_p2 = (32'd0 - tmp_100_fu_954_p1);

assign p_neg_t2_fu_1018_p2 = (32'd0 - tmp_102_fu_1014_p1);

assign p_neg_t_fu_1078_p2 = (31'd0 - p_lshr_cast_fu_1074_p1);

assign smax1_fu_1111_p3 = ((tmp_s_fu_1106_p2[0:0] === 1'b1) ? tmp_180_reg_1468 : 31'd0);

assign smax_cast_fu_1153_p1 = smax_fu_1147_p3;

assign smax_fu_1147_p3 = ((tmp_reg_1501[0:0] === 1'b1) ? tmp_182_reg_1480 : 31'd0);

assign sum_cast_fu_1417_p1 = $signed(sum_reg_1756);

assign sum_fu_1412_p2 = ($signed(tmp_32_cast_fu_1409_p1) + $signed(Output_offset_cast_reg_1457));

assign tc_3_fu_1400_p2 = (tc_mid2_reg_1555 + 31'd1);

assign tc_cast_fu_1166_p1 = ap_phi_mux_tc_phi_fu_795_p4;

assign tc_mid2_fu_1272_p3 = ((tmp_36_mid_fu_1246_p3[0:0] === 1'b1) ? tc_mid_fu_1218_p3 : 31'd0);

assign tc_mid_fu_1218_p3 = ((exitcond_flatten_fu_1197_p2[0:0] === 1'b1) ? 31'd0 : ap_phi_mux_tc_phi_fu_795_p4);

assign tm_2_fu_1186_p2 = (31'd1 + ap_phi_mux_tm_phi_fu_740_p4);

assign tm_t_mid2_v_fu_1234_p3 = ((exitcond_flatten_fu_1197_p2[0:0] === 1'b1) ? tm_2_fu_1186_p2 : ap_phi_mux_tm_phi_fu_740_p4);

assign tmp_100_fu_954_p1 = p_lshr1_fu_944_p4;

assign tmp_101_fu_974_p1 = p_lshr_f1_fu_964_p4;

assign tmp_102_fu_1014_p1 = p_lshr2_fu_1004_p4;

assign tmp_103_fu_1034_p1 = p_lshr_f2_fu_1024_p4;

assign tmp_104_fu_1064_p4 = {{p_neg_fu_1058_p2[31:2]}};

assign tmp_105_fu_1084_p4 = {{offset[31:2]}};

assign tmp_106_fu_1340_p2 = (tmp_189_fu_1336_p1 + tmp_116_cast_fu_1312_p3);

assign tmp_116_cast_fu_1312_p3 = {{tmp_188_fu_1304_p3}, {5'd0}};

assign tmp_117_cast_fu_1360_p1 = tmp_106_reg_1576;

assign tmp_179_fu_930_p3 = TR[32'd31];

assign tmp_180_fu_986_p1 = TR_assign_fu_978_p3[30:0];

assign tmp_181_fu_990_p3 = TC[32'd31];

assign tmp_182_fu_1046_p1 = TC_assign_fu_1038_p3[30:0];

assign tmp_183_fu_1050_p3 = offset[32'd31];

assign tmp_184_fu_1242_p1 = tm_t_mid2_v_fu_1234_p3[4:0];

assign tmp_185_fu_1288_p1 = ap_phi_mux_tr_phi_fu_773_p4[6:0];

assign tmp_186_fu_1292_p3 = ((exitcond_flatten_fu_1197_p2[0:0] === 1'b1) ? 7'd0 : tmp_185_fu_1288_p1);

assign tmp_187_fu_1300_p1 = tr_3_fu_1261_p2[6:0];

assign tmp_188_fu_1304_p3 = ((tmp_36_mid_fu_1246_p3[0:0] === 1'b1) ? tmp_186_fu_1292_p3 : tmp_187_fu_1300_p1);

assign tmp_189_fu_1336_p1 = tc_mid2_fu_1272_p3[11:0];

assign tmp_30_fu_1160_p0 = tmp_30_fu_1160_p00;

assign tmp_30_fu_1160_p00 = smax_fu_1147_p3;

assign tmp_30_fu_1160_p1 = tmp_30_fu_1160_p10;

assign tmp_30_fu_1160_p10 = smax1_reg_1490;

assign tmp_30_fu_1160_p2 = (tmp_30_fu_1160_p0 * tmp_30_fu_1160_p1);

assign tmp_32_cast_fu_1409_p1 = $signed(offset_assign_reg_1485);

assign tmp_34_dup_fu_1267_p2 = (smax_cast_reg_1517 + output_tmp_offset_1_s_fu_1210_p3);

assign tmp_36_fu_1170_p2 = (($signed(tc_cast_fu_1166_p1) < $signed(TC_assign_reg_1473)) ? 1'b1 : 1'b0);

assign tmp_36_mid_fu_1246_p3 = ((exitcond_flatten_fu_1197_p2[0:0] === 1'b1) ? tmp_reg_1501 : tmp_36_fu_1170_p2);

assign tmp_38_fu_1405_p1 = output_tmp_offset_2_1_reg_1560;

assign tmp_39_fu_1395_p2 = ($signed(output_tmp_offset_2_1_reg_1560) + $signed(32'd1));

assign tmp_fu_1130_p2 = (($signed(TC_assign_reg_1473) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmp_s_fu_1106_p2 = (($signed(TR_assign_reg_1462) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tr_3_fu_1261_p2 = (31'd1 + tr_mid_fu_1202_p3);

assign tr_mid2_fu_1320_p3 = ((tmp_36_mid_fu_1246_p3[0:0] === 1'b1) ? tr_mid_fu_1202_p3 : tr_3_fu_1261_p2);

assign tr_mid_fu_1202_p3 = ((exitcond_flatten_fu_1197_p2[0:0] === 1'b1) ? 31'd0 : ap_phi_mux_tr_phi_fu_773_p4);

assign write_flag_read_read_fu_236_p2 = write_flag;

always @ (posedge ap_clk) begin
    Output_offset_cast_reg_1457[31:30] <= 2'b00;
    smax_cast_reg_1517[31] <= 1'b0;
end

endmodule //output_write
