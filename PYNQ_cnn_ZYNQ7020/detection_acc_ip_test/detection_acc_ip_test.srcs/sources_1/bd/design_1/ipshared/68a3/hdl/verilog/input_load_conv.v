// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module input_load_conv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_input_r_AWVALID,
        m_axi_input_r_AWREADY,
        m_axi_input_r_AWADDR,
        m_axi_input_r_AWID,
        m_axi_input_r_AWLEN,
        m_axi_input_r_AWSIZE,
        m_axi_input_r_AWBURST,
        m_axi_input_r_AWLOCK,
        m_axi_input_r_AWCACHE,
        m_axi_input_r_AWPROT,
        m_axi_input_r_AWQOS,
        m_axi_input_r_AWREGION,
        m_axi_input_r_AWUSER,
        m_axi_input_r_WVALID,
        m_axi_input_r_WREADY,
        m_axi_input_r_WDATA,
        m_axi_input_r_WSTRB,
        m_axi_input_r_WLAST,
        m_axi_input_r_WID,
        m_axi_input_r_WUSER,
        m_axi_input_r_ARVALID,
        m_axi_input_r_ARREADY,
        m_axi_input_r_ARADDR,
        m_axi_input_r_ARID,
        m_axi_input_r_ARLEN,
        m_axi_input_r_ARSIZE,
        m_axi_input_r_ARBURST,
        m_axi_input_r_ARLOCK,
        m_axi_input_r_ARCACHE,
        m_axi_input_r_ARPROT,
        m_axi_input_r_ARQOS,
        m_axi_input_r_ARREGION,
        m_axi_input_r_ARUSER,
        m_axi_input_r_RVALID,
        m_axi_input_r_RREADY,
        m_axi_input_r_RDATA,
        m_axi_input_r_RLAST,
        m_axi_input_r_RID,
        m_axi_input_r_RUSER,
        m_axi_input_r_RRESP,
        m_axi_input_r_BVALID,
        m_axi_input_r_BREADY,
        m_axi_input_r_BRESP,
        m_axi_input_r_BID,
        m_axi_input_r_BUSER,
        input_offset,
        input_buffer_0_V_address0,
        input_buffer_0_V_ce0,
        input_buffer_0_V_we0,
        input_buffer_0_V_d0,
        input_buffer_1_V_address0,
        input_buffer_1_V_ce0,
        input_buffer_1_V_we0,
        input_buffer_1_V_d0,
        input_buffer_2_V_address0,
        input_buffer_2_V_ce0,
        input_buffer_2_V_we0,
        input_buffer_2_V_d0,
        input_buffer_3_V_address0,
        input_buffer_3_V_ce0,
        input_buffer_3_V_we0,
        input_buffer_3_V_d0,
        TR,
        TC,
        TN,
        offset,
        enable
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_pp0_stage0 = 16'd256;
parameter    ap_ST_fsm_state12 = 16'd512;
parameter    ap_ST_fsm_state13 = 16'd1024;
parameter    ap_ST_fsm_state14 = 16'd2048;
parameter    ap_ST_fsm_state15 = 16'd4096;
parameter    ap_ST_fsm_state16 = 16'd8192;
parameter    ap_ST_fsm_state17 = 16'd16384;
parameter    ap_ST_fsm_state18 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_input_r_AWVALID;
input   m_axi_input_r_AWREADY;
output  [31:0] m_axi_input_r_AWADDR;
output  [0:0] m_axi_input_r_AWID;
output  [31:0] m_axi_input_r_AWLEN;
output  [2:0] m_axi_input_r_AWSIZE;
output  [1:0] m_axi_input_r_AWBURST;
output  [1:0] m_axi_input_r_AWLOCK;
output  [3:0] m_axi_input_r_AWCACHE;
output  [2:0] m_axi_input_r_AWPROT;
output  [3:0] m_axi_input_r_AWQOS;
output  [3:0] m_axi_input_r_AWREGION;
output  [0:0] m_axi_input_r_AWUSER;
output   m_axi_input_r_WVALID;
input   m_axi_input_r_WREADY;
output  [31:0] m_axi_input_r_WDATA;
output  [3:0] m_axi_input_r_WSTRB;
output   m_axi_input_r_WLAST;
output  [0:0] m_axi_input_r_WID;
output  [0:0] m_axi_input_r_WUSER;
output   m_axi_input_r_ARVALID;
input   m_axi_input_r_ARREADY;
output  [31:0] m_axi_input_r_ARADDR;
output  [0:0] m_axi_input_r_ARID;
output  [31:0] m_axi_input_r_ARLEN;
output  [2:0] m_axi_input_r_ARSIZE;
output  [1:0] m_axi_input_r_ARBURST;
output  [1:0] m_axi_input_r_ARLOCK;
output  [3:0] m_axi_input_r_ARCACHE;
output  [2:0] m_axi_input_r_ARPROT;
output  [3:0] m_axi_input_r_ARQOS;
output  [3:0] m_axi_input_r_ARREGION;
output  [0:0] m_axi_input_r_ARUSER;
input   m_axi_input_r_RVALID;
output   m_axi_input_r_RREADY;
input  [31:0] m_axi_input_r_RDATA;
input   m_axi_input_r_RLAST;
input  [0:0] m_axi_input_r_RID;
input  [0:0] m_axi_input_r_RUSER;
input  [1:0] m_axi_input_r_RRESP;
input   m_axi_input_r_BVALID;
output   m_axi_input_r_BREADY;
input  [1:0] m_axi_input_r_BRESP;
input  [0:0] m_axi_input_r_BID;
input  [0:0] m_axi_input_r_BUSER;
input  [29:0] input_offset;
output  [10:0] input_buffer_0_V_address0;
output   input_buffer_0_V_ce0;
output   input_buffer_0_V_we0;
output  [7:0] input_buffer_0_V_d0;
output  [10:0] input_buffer_1_V_address0;
output   input_buffer_1_V_ce0;
output   input_buffer_1_V_we0;
output  [7:0] input_buffer_1_V_d0;
output  [10:0] input_buffer_2_V_address0;
output   input_buffer_2_V_ce0;
output   input_buffer_2_V_we0;
output  [7:0] input_buffer_2_V_d0;
output  [10:0] input_buffer_3_V_address0;
output   input_buffer_3_V_ce0;
output   input_buffer_3_V_we0;
output  [7:0] input_buffer_3_V_d0;
input  [31:0] TR;
input  [31:0] TC;
input  [31:0] TN;
input  [31:0] offset;
input   enable;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_input_r_ARVALID;
reg m_axi_input_r_RREADY;
reg[10:0] input_buffer_0_V_address0;
reg input_buffer_0_V_ce0;
reg input_buffer_0_V_we0;
reg[7:0] input_buffer_0_V_d0;
reg[10:0] input_buffer_1_V_address0;
reg input_buffer_1_V_ce0;
reg input_buffer_1_V_we0;
reg[7:0] input_buffer_1_V_d0;
reg[10:0] input_buffer_2_V_address0;
reg input_buffer_2_V_ce0;
reg input_buffer_2_V_we0;
reg[7:0] input_buffer_2_V_d0;
reg[10:0] input_buffer_3_V_address0;
reg input_buffer_3_V_ce0;
reg input_buffer_3_V_we0;
reg[7:0] input_buffer_3_V_d0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] input_tmp_buffer_address0;
reg    input_tmp_buffer_ce0;
reg    input_tmp_buffer_we0;
wire   [31:0] input_tmp_buffer_q0;
reg    input_r_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    input_r_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_862;
reg   [10:0] indvar_reg_275;
reg   [10:0] indvar_reg_275_pp0_iter1_reg;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] enable_read_read_fu_118_p2;
reg   [31:0] input_addr_reg_856;
wire   [0:0] exitcond_fu_370_p2;
reg   [0:0] exitcond_reg_862_pp0_iter1_reg;
wire   [10:0] indvar_next_fu_376_p2;
reg   [10:0] indvar_next_reg_866;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] input_addr_read_reg_871;
wire   [31:0] tmp_s_fu_387_p2;
reg   [31:0] tmp_s_reg_883;
wire    ap_CS_fsm_state12;
wire   [31:0] tmp_40_fu_392_p2;
reg   [31:0] tmp_40_reg_888;
wire   [63:0] bound_fu_408_p2;
reg   [63:0] bound_reg_895;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire   [31:0] tmp_41_fu_426_p2;
reg   [31:0] tmp_41_reg_911;
wire    ap_CS_fsm_state15;
wire   [31:0] tmp_42_fu_431_p2;
reg   [31:0] tmp_42_reg_917;
wire   [31:0] tmp_43_fu_436_p2;
reg   [31:0] tmp_43_reg_922;
wire   [31:0] tmp_44_fu_441_p2;
reg   [31:0] tmp_44_reg_928;
wire   [95:0] grp_fu_420_p2;
reg   [95:0] bound4_reg_933;
wire   [0:0] tmp_49_mid_fu_446_p2;
reg   [0:0] tmp_49_mid_reg_938;
wire   [0:0] tmp_51_mid_fu_452_p2;
reg   [0:0] tmp_51_mid_reg_943;
wire   [0:0] tmp_52_mid_fu_458_p2;
reg   [0:0] tmp_52_mid_reg_948;
wire   [0:0] exitcond_flatten5_fu_486_p2;
reg   [0:0] exitcond_flatten5_reg_953;
wire    ap_CS_fsm_state16;
wire   [95:0] indvar_flatten_next5_fu_491_p2;
reg   [95:0] indvar_flatten_next5_reg_957;
wire   [0:0] exitcond_flatten_fu_503_p2;
reg   [0:0] exitcond_flatten_reg_962;
wire   [30:0] tn_t7_mid2_v_fu_524_p3;
reg   [30:0] tn_t7_mid2_v_reg_967;
wire   [1:0] tmp_fu_532_p1;
reg   [1:0] tmp_reg_972;
wire   [30:0] tc_mid2_fu_593_p3;
reg   [30:0] tc_mid2_reg_976;
wire   [30:0] tmp_48_mid2_fu_619_p3;
reg   [30:0] tmp_48_mid2_reg_983;
wire   [11:0] tmp_110_fu_651_p2;
reg   [11:0] tmp_110_reg_988;
wire   [0:0] brmerge_fu_713_p2;
reg   [0:0] brmerge_reg_994;
wire   [0:0] or_cond3_fu_753_p2;
reg   [0:0] or_cond3_reg_998;
wire   [30:0] tc_4_fu_815_p2;
wire    ap_CS_fsm_state17;
wire   [63:0] indvar_flatten_next_fu_826_p3;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
reg   [10:0] ap_phi_mux_indvar_phi_fu_279_p4;
reg   [95:0] indvar_flatten5_reg_287;
reg   [30:0] tn_reg_298;
reg   [63:0] indvar_flatten_reg_309;
reg   [30:0] tr_reg_321;
reg   [30:0] tc_reg_332;
wire   [63:0] indvar4_fu_382_p1;
wire  signed [63:0] tmp_58_fu_759_p1;
wire   [63:0] tmp_123_cast_fu_772_p1;
wire   [63:0] tmp_122_cast_fu_807_p1;
wire  signed [63:0] sum_cast_fu_360_p1;
reg    ap_reg_ioackin_m_axi_input_r_ARREADY;
reg    ap_sig_ioackin_m_axi_input_r_ARREADY;
reg   [31:0] input_tmp_offset_1_fu_114;
wire   [31:0] input_tmp_offset_fu_788_p2;
wire   [7:0] tmp_194_fu_780_p1;
wire  signed [32:0] tmp_cast_fu_346_p1;
wire   [32:0] sext_cast_fu_350_p1;
wire   [32:0] sum_fu_354_p2;
wire   [31:0] bound_fu_408_p0;
wire   [31:0] bound_fu_408_p1;
wire   [63:0] grp_fu_420_p0;
wire   [31:0] grp_fu_420_p1;
wire   [31:0] tmp_107_fu_463_p1;
wire   [31:0] tc_cast_fu_477_p1;
wire   [30:0] tn_2_fu_497_p2;
wire   [0:0] tmp_108_fu_536_p2;
wire   [0:0] tmp_47_fu_467_p2;
wire   [0:0] tmp_109_fu_561_p2;
wire   [0:0] not_exitcond_flatten_fu_555_p2;
wire   [0:0] tmp_49_fu_472_p2;
wire   [0:0] tmp_50_fu_481_p2;
wire   [30:0] tr_mid_fu_508_p3;
wire   [0:0] tmp_52_mid1_fu_580_p3;
wire   [30:0] tc_mid_fu_516_p3;
wire   [30:0] tr_4_fu_587_p2;
wire   [0:0] tmp_47_mid_fu_542_p2;
wire   [0:0] tmp_47_mid1_fu_605_p2;
wire   [6:0] tmp_190_fu_627_p1;
wire   [9:0] tmp_191_fu_639_p1;
wire   [11:0] p_shl_cast_fu_631_p3;
wire   [11:0] p_shl5_cast_fu_643_p3;
wire   [31:0] p_mid1_fu_601_p1;
wire   [0:0] tmp_49_mid3_fu_548_p3;
wire   [0:0] tmp_49_mid1_fu_657_p2;
wire   [0:0] tmp_50_mid_fu_567_p2;
wire   [0:0] tmp_50_mid1_fu_670_p2;
wire   [0:0] tmp_51_mid3_fu_573_p3;
wire   [0:0] tmp_51_mid1_fu_684_p2;
wire   [0:0] tmp_52_fu_701_p2;
wire   [0:0] tmp_49_mid2_fu_662_p3;
wire   [0:0] tmp1_fu_707_p2;
wire   [0:0] tmp_47_mid2_fu_611_p3;
wire   [31:0] tc_cast_mid2_cast_fu_697_p1;
wire   [0:0] tmp_53_fu_719_p2;
wire   [0:0] tmp_50_mid2_fu_676_p3;
wire   [0:0] tmp_51_mid2_fu_689_p3;
wire   [0:0] tmp_55_fu_730_p2;
wire   [0:0] tmp4_fu_741_p2;
wire   [0:0] tmp_54_fu_724_p2;
wire   [0:0] tmp3_fu_747_p2;
wire   [0:0] tmp2_fu_735_p2;
wire  signed [31:0] tmp_58_fu_759_p0;
wire   [11:0] tmp_193_fu_764_p1;
wire   [11:0] tmp_112_fu_767_p2;
wire   [11:0] tmp_192_fu_799_p1;
wire   [11:0] tmp_111_fu_802_p2;
wire   [63:0] indvar_flatten_op_fu_820_p2;
wire    ap_CS_fsm_state18;
reg   [15:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] bound_fu_408_p00;
wire   [63:0] bound_fu_408_p10;
wire   [95:0] grp_fu_420_p00;
wire   [95:0] grp_fu_420_p10;
reg    ap_condition_396;
reg    ap_condition_400;
reg    ap_condition_388;
reg    ap_condition_392;
reg    ap_condition_377;
reg    ap_condition_382;
reg    ap_condition_405;
reg    ap_condition_409;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_reg_ioackin_m_axi_input_r_ARREADY = 1'b0;
end

input_load_conv_ibkb #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
input_tmp_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input_tmp_buffer_address0),
    .ce0(input_tmp_buffer_ce0),
    .we0(input_tmp_buffer_we0),
    .d0(input_addr_read_reg_871),
    .q0(input_tmp_buffer_q0)
);

detection_acc_mulcud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 96 ))
detection_acc_mulcud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_420_p0),
    .din1(grp_fu_420_p1),
    .ce(1'b1),
    .dout(grp_fu_420_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_input_r_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if ((ap_sig_ioackin_m_axi_input_r_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_input_r_ARREADY <= 1'b0;
            end else if ((m_axi_input_r_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_input_r_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten5_reg_953 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        indvar_flatten5_reg_287 <= indvar_flatten_next5_reg_957;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        indvar_flatten5_reg_287 <= 96'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten5_reg_953 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        indvar_flatten_reg_309 <= indvar_flatten_next_fu_826_p3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        indvar_flatten_reg_309 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_862 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_reg_275 <= indvar_next_reg_866;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_reg_275 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond3_reg_998 == 1'd0) & (brmerge_reg_994 == 1'd0) & (exitcond_flatten5_reg_953 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        input_tmp_offset_1_fu_114 <= input_tmp_offset_fu_788_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        input_tmp_offset_1_fu_114 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten5_reg_953 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        tc_reg_332 <= tc_4_fu_815_p2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        tc_reg_332 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten5_reg_953 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        tn_reg_298 <= tn_t7_mid2_v_reg_967;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        tn_reg_298 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten5_reg_953 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        tr_reg_321 <= tmp_48_mid2_reg_983;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        tr_reg_321 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        bound4_reg_933 <= grp_fu_420_p2;
        tmp_41_reg_911 <= tmp_41_fu_426_p2;
        tmp_42_reg_917 <= tmp_42_fu_431_p2;
        tmp_43_reg_922 <= tmp_43_fu_436_p2;
        tmp_44_reg_928 <= tmp_44_fu_441_p2;
        tmp_49_mid_reg_938 <= tmp_49_mid_fu_446_p2;
        tmp_51_mid_reg_943 <= tmp_51_mid_fu_452_p2;
        tmp_52_mid_reg_948 <= tmp_52_mid_fu_458_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        bound_reg_895 <= bound_fu_408_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten5_fu_486_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        brmerge_reg_994 <= brmerge_fu_713_p2;
        exitcond_flatten_reg_962 <= exitcond_flatten_fu_503_p2;
        tc_mid2_reg_976 <= tc_mid2_fu_593_p3;
        tmp_110_reg_988[11 : 2] <= tmp_110_fu_651_p2[11 : 2];
        tmp_48_mid2_reg_983 <= tmp_48_mid2_fu_619_p3;
        tmp_reg_972 <= tmp_fu_532_p1;
        tn_t7_mid2_v_reg_967 <= tn_t7_mid2_v_fu_524_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        exitcond_flatten5_reg_953 <= exitcond_flatten5_fu_486_p2;
        indvar_flatten_next5_reg_957 <= indvar_flatten_next5_fu_491_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_reg_862 <= exitcond_fu_370_p2;
        exitcond_reg_862_pp0_iter1_reg <= exitcond_reg_862;
        indvar_reg_275_pp0_iter1_reg <= indvar_reg_275;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_next_reg_866 <= indvar_next_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_862 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_addr_read_reg_871 <= m_axi_input_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((enable_read_read_fu_118_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_addr_reg_856 <= sum_cast_fu_360_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((brmerge_fu_713_p2 == 1'd0) & (exitcond_flatten5_fu_486_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        or_cond3_reg_998 <= or_cond3_fu_753_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_40_reg_888 <= tmp_40_fu_392_p2;
        tmp_s_reg_883 <= tmp_s_fu_387_p2;
    end
end

always @ (*) begin
    if ((exitcond_fu_370_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_862 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_phi_fu_279_p4 = indvar_next_reg_866;
    end else begin
        ap_phi_mux_indvar_phi_fu_279_p4 = indvar_reg_275;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_input_r_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_input_r_ARREADY = m_axi_input_r_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_input_r_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        if ((1'b1 == ap_condition_400)) begin
            input_buffer_0_V_address0 = tmp_122_cast_fu_807_p1;
        end else if ((1'b1 == ap_condition_396)) begin
            input_buffer_0_V_address0 = tmp_123_cast_fu_772_p1;
        end else begin
            input_buffer_0_V_address0 = 'bx;
        end
    end else begin
        input_buffer_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state17) & (((tmp_reg_972 == 2'd0) & (exitcond_flatten5_reg_953 == 1'd0) & (brmerge_reg_994 == 1'd1)) | ((tmp_reg_972 == 2'd0) & (exitcond_flatten5_reg_953 == 1'd0) & (or_cond3_reg_998 == 1'd1)))) | ((tmp_reg_972 == 2'd0) & (or_cond3_reg_998 == 1'd0) & (brmerge_reg_994 == 1'd0) & (exitcond_flatten5_reg_953 == 1'd0) & (1'b1 == ap_CS_fsm_state17)))) begin
        input_buffer_0_V_ce0 = 1'b1;
    end else begin
        input_buffer_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        if ((1'b1 == ap_condition_400)) begin
            input_buffer_0_V_d0 = 8'd0;
        end else if ((1'b1 == ap_condition_396)) begin
            input_buffer_0_V_d0 = tmp_194_fu_780_p1;
        end else begin
            input_buffer_0_V_d0 = 'bx;
        end
    end else begin
        input_buffer_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state17) & (((tmp_reg_972 == 2'd0) & (exitcond_flatten5_reg_953 == 1'd0) & (brmerge_reg_994 == 1'd1)) | ((tmp_reg_972 == 2'd0) & (exitcond_flatten5_reg_953 == 1'd0) & (or_cond3_reg_998 == 1'd1)))) | ((tmp_reg_972 == 2'd0) & (or_cond3_reg_998 == 1'd0) & (brmerge_reg_994 == 1'd0) & (exitcond_flatten5_reg_953 == 1'd0) & (1'b1 == ap_CS_fsm_state17)))) begin
        input_buffer_0_V_we0 = 1'b1;
    end else begin
        input_buffer_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        if ((1'b1 == ap_condition_392)) begin
            input_buffer_1_V_address0 = tmp_122_cast_fu_807_p1;
        end else if ((1'b1 == ap_condition_388)) begin
            input_buffer_1_V_address0 = tmp_123_cast_fu_772_p1;
        end else begin
            input_buffer_1_V_address0 = 'bx;
        end
    end else begin
        input_buffer_1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state17) & (((exitcond_flatten5_reg_953 == 1'd0) & (brmerge_reg_994 == 1'd1) & (tmp_reg_972 == 2'd1)) | ((exitcond_flatten5_reg_953 == 1'd0) & (or_cond3_reg_998 == 1'd1) & (tmp_reg_972 == 2'd1)))) | ((or_cond3_reg_998 == 1'd0) & (brmerge_reg_994 == 1'd0) & (exitcond_flatten5_reg_953 == 1'd0) & (tmp_reg_972 == 2'd1) & (1'b1 == ap_CS_fsm_state17)))) begin
        input_buffer_1_V_ce0 = 1'b1;
    end else begin
        input_buffer_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        if ((1'b1 == ap_condition_392)) begin
            input_buffer_1_V_d0 = 8'd0;
        end else if ((1'b1 == ap_condition_388)) begin
            input_buffer_1_V_d0 = tmp_194_fu_780_p1;
        end else begin
            input_buffer_1_V_d0 = 'bx;
        end
    end else begin
        input_buffer_1_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state17) & (((exitcond_flatten5_reg_953 == 1'd0) & (brmerge_reg_994 == 1'd1) & (tmp_reg_972 == 2'd1)) | ((exitcond_flatten5_reg_953 == 1'd0) & (or_cond3_reg_998 == 1'd1) & (tmp_reg_972 == 2'd1)))) | ((or_cond3_reg_998 == 1'd0) & (brmerge_reg_994 == 1'd0) & (exitcond_flatten5_reg_953 == 1'd0) & (tmp_reg_972 == 2'd1) & (1'b1 == ap_CS_fsm_state17)))) begin
        input_buffer_1_V_we0 = 1'b1;
    end else begin
        input_buffer_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        if ((1'b1 == ap_condition_382)) begin
            input_buffer_2_V_address0 = tmp_122_cast_fu_807_p1;
        end else if ((1'b1 == ap_condition_377)) begin
            input_buffer_2_V_address0 = tmp_123_cast_fu_772_p1;
        end else begin
            input_buffer_2_V_address0 = 'bx;
        end
    end else begin
        input_buffer_2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state17) & (((exitcond_flatten5_reg_953 == 1'd0) & (brmerge_reg_994 == 1'd1) & (tmp_reg_972 == 2'd2)) | ((exitcond_flatten5_reg_953 == 1'd0) & (or_cond3_reg_998 == 1'd1) & (tmp_reg_972 == 2'd2)))) | ((or_cond3_reg_998 == 1'd0) & (brmerge_reg_994 == 1'd0) & (exitcond_flatten5_reg_953 == 1'd0) & (tmp_reg_972 == 2'd2) & (1'b1 == ap_CS_fsm_state17)))) begin
        input_buffer_2_V_ce0 = 1'b1;
    end else begin
        input_buffer_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        if ((1'b1 == ap_condition_382)) begin
            input_buffer_2_V_d0 = 8'd0;
        end else if ((1'b1 == ap_condition_377)) begin
            input_buffer_2_V_d0 = tmp_194_fu_780_p1;
        end else begin
            input_buffer_2_V_d0 = 'bx;
        end
    end else begin
        input_buffer_2_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state17) & (((exitcond_flatten5_reg_953 == 1'd0) & (brmerge_reg_994 == 1'd1) & (tmp_reg_972 == 2'd2)) | ((exitcond_flatten5_reg_953 == 1'd0) & (or_cond3_reg_998 == 1'd1) & (tmp_reg_972 == 2'd2)))) | ((or_cond3_reg_998 == 1'd0) & (brmerge_reg_994 == 1'd0) & (exitcond_flatten5_reg_953 == 1'd0) & (tmp_reg_972 == 2'd2) & (1'b1 == ap_CS_fsm_state17)))) begin
        input_buffer_2_V_we0 = 1'b1;
    end else begin
        input_buffer_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        if ((1'b1 == ap_condition_409)) begin
            input_buffer_3_V_address0 = tmp_122_cast_fu_807_p1;
        end else if ((1'b1 == ap_condition_405)) begin
            input_buffer_3_V_address0 = tmp_123_cast_fu_772_p1;
        end else begin
            input_buffer_3_V_address0 = 'bx;
        end
    end else begin
        input_buffer_3_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state17) & (((exitcond_flatten5_reg_953 == 1'd0) & (brmerge_reg_994 == 1'd1) & (tmp_reg_972 == 2'd3)) | ((exitcond_flatten5_reg_953 == 1'd0) & (or_cond3_reg_998 == 1'd1) & (tmp_reg_972 == 2'd3)))) | ((or_cond3_reg_998 == 1'd0) & (brmerge_reg_994 == 1'd0) & (exitcond_flatten5_reg_953 == 1'd0) & (tmp_reg_972 == 2'd3) & (1'b1 == ap_CS_fsm_state17)))) begin
        input_buffer_3_V_ce0 = 1'b1;
    end else begin
        input_buffer_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        if ((1'b1 == ap_condition_409)) begin
            input_buffer_3_V_d0 = 8'd0;
        end else if ((1'b1 == ap_condition_405)) begin
            input_buffer_3_V_d0 = tmp_194_fu_780_p1;
        end else begin
            input_buffer_3_V_d0 = 'bx;
        end
    end else begin
        input_buffer_3_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state17) & (((exitcond_flatten5_reg_953 == 1'd0) & (brmerge_reg_994 == 1'd1) & (tmp_reg_972 == 2'd3)) | ((exitcond_flatten5_reg_953 == 1'd0) & (or_cond3_reg_998 == 1'd1) & (tmp_reg_972 == 2'd3)))) | ((or_cond3_reg_998 == 1'd0) & (brmerge_reg_994 == 1'd0) & (exitcond_flatten5_reg_953 == 1'd0) & (tmp_reg_972 == 2'd3) & (1'b1 == ap_CS_fsm_state17)))) begin
        input_buffer_3_V_we0 = 1'b1;
    end else begin
        input_buffer_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_r_blk_n_AR = m_axi_input_r_ARREADY;
    end else begin
        input_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_reg_862 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_r_blk_n_R = m_axi_input_r_RVALID;
    end else begin
        input_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        input_tmp_buffer_address0 = tmp_58_fu_759_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        input_tmp_buffer_address0 = indvar4_fu_382_p1;
    end else begin
        input_tmp_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_tmp_buffer_ce0 = 1'b1;
    end else begin
        input_tmp_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_862_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_tmp_buffer_we0 = 1'b1;
    end else begin
        input_tmp_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_input_r_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_input_r_ARVALID = 1'b1;
    end else begin
        m_axi_input_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_862 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_input_r_RREADY = 1'b1;
    end else begin
        m_axi_input_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (enable_read_read_fu_118_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else if (((enable_read_read_fu_118_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_sig_ioackin_m_axi_input_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_fu_370_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_fu_370_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((exitcond_flatten5_fu_486_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((exitcond_reg_862 == 1'd0) & (m_axi_input_r_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((exitcond_reg_862 == 1'd0) & (m_axi_input_r_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((exitcond_reg_862 == 1'd0) & (m_axi_input_r_RVALID == 1'b0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_377 = ((or_cond3_reg_998 == 1'd0) & (brmerge_reg_994 == 1'd0) & (exitcond_flatten5_reg_953 == 1'd0) & (tmp_reg_972 == 2'd2));
end

always @ (*) begin
    ap_condition_382 = (((exitcond_flatten5_reg_953 == 1'd0) & (brmerge_reg_994 == 1'd1) & (tmp_reg_972 == 2'd2)) | ((exitcond_flatten5_reg_953 == 1'd0) & (or_cond3_reg_998 == 1'd1) & (tmp_reg_972 == 2'd2)));
end

always @ (*) begin
    ap_condition_388 = ((or_cond3_reg_998 == 1'd0) & (brmerge_reg_994 == 1'd0) & (exitcond_flatten5_reg_953 == 1'd0) & (tmp_reg_972 == 2'd1));
end

always @ (*) begin
    ap_condition_392 = (((exitcond_flatten5_reg_953 == 1'd0) & (brmerge_reg_994 == 1'd1) & (tmp_reg_972 == 2'd1)) | ((exitcond_flatten5_reg_953 == 1'd0) & (or_cond3_reg_998 == 1'd1) & (tmp_reg_972 == 2'd1)));
end

always @ (*) begin
    ap_condition_396 = ((tmp_reg_972 == 2'd0) & (or_cond3_reg_998 == 1'd0) & (brmerge_reg_994 == 1'd0) & (exitcond_flatten5_reg_953 == 1'd0));
end

always @ (*) begin
    ap_condition_400 = (((tmp_reg_972 == 2'd0) & (exitcond_flatten5_reg_953 == 1'd0) & (brmerge_reg_994 == 1'd1)) | ((tmp_reg_972 == 2'd0) & (exitcond_flatten5_reg_953 == 1'd0) & (or_cond3_reg_998 == 1'd1)));
end

always @ (*) begin
    ap_condition_405 = ((or_cond3_reg_998 == 1'd0) & (brmerge_reg_994 == 1'd0) & (exitcond_flatten5_reg_953 == 1'd0) & (tmp_reg_972 == 2'd3));
end

always @ (*) begin
    ap_condition_409 = (((exitcond_flatten5_reg_953 == 1'd0) & (brmerge_reg_994 == 1'd1) & (tmp_reg_972 == 2'd3)) | ((exitcond_flatten5_reg_953 == 1'd0) & (or_cond3_reg_998 == 1'd1) & (tmp_reg_972 == 2'd3)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound_fu_408_p0 = bound_fu_408_p00;

assign bound_fu_408_p00 = tmp_40_reg_888;

assign bound_fu_408_p1 = bound_fu_408_p10;

assign bound_fu_408_p10 = tmp_s_reg_883;

assign bound_fu_408_p2 = (bound_fu_408_p0 * bound_fu_408_p1);

assign brmerge_fu_713_p2 = (tmp_47_mid2_fu_611_p3 | tmp1_fu_707_p2);

assign enable_read_read_fu_118_p2 = enable;

assign exitcond_flatten5_fu_486_p2 = ((indvar_flatten5_reg_287 == bound4_reg_933) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_503_p2 = ((indvar_flatten_reg_309 == bound_reg_895) ? 1'b1 : 1'b0);

assign exitcond_fu_370_p2 = ((ap_phi_mux_indvar_phi_fu_279_p4 == 11'd1024) ? 1'b1 : 1'b0);

assign grp_fu_420_p0 = grp_fu_420_p00;

assign grp_fu_420_p00 = bound_reg_895;

assign grp_fu_420_p1 = grp_fu_420_p10;

assign grp_fu_420_p10 = TN;

assign indvar4_fu_382_p1 = indvar_reg_275_pp0_iter1_reg;

assign indvar_flatten_next5_fu_491_p2 = (indvar_flatten5_reg_287 + 96'd1);

assign indvar_flatten_next_fu_826_p3 = ((exitcond_flatten_reg_962[0:0] === 1'b1) ? 64'd1 : indvar_flatten_op_fu_820_p2);

assign indvar_flatten_op_fu_820_p2 = (indvar_flatten_reg_309 + 64'd1);

assign indvar_next_fu_376_p2 = (ap_phi_mux_indvar_phi_fu_279_p4 + 11'd1);

assign input_tmp_offset_fu_788_p2 = (input_tmp_offset_1_fu_114 + 32'd1);

assign m_axi_input_r_ARADDR = input_addr_reg_856;

assign m_axi_input_r_ARBURST = 2'd0;

assign m_axi_input_r_ARCACHE = 4'd0;

assign m_axi_input_r_ARID = 1'd0;

assign m_axi_input_r_ARLEN = 32'd1024;

assign m_axi_input_r_ARLOCK = 2'd0;

assign m_axi_input_r_ARPROT = 3'd0;

assign m_axi_input_r_ARQOS = 4'd0;

assign m_axi_input_r_ARREGION = 4'd0;

assign m_axi_input_r_ARSIZE = 3'd0;

assign m_axi_input_r_ARUSER = 1'd0;

assign m_axi_input_r_AWADDR = 32'd0;

assign m_axi_input_r_AWBURST = 2'd0;

assign m_axi_input_r_AWCACHE = 4'd0;

assign m_axi_input_r_AWID = 1'd0;

assign m_axi_input_r_AWLEN = 32'd0;

assign m_axi_input_r_AWLOCK = 2'd0;

assign m_axi_input_r_AWPROT = 3'd0;

assign m_axi_input_r_AWQOS = 4'd0;

assign m_axi_input_r_AWREGION = 4'd0;

assign m_axi_input_r_AWSIZE = 3'd0;

assign m_axi_input_r_AWUSER = 1'd0;

assign m_axi_input_r_AWVALID = 1'b0;

assign m_axi_input_r_BREADY = 1'b0;

assign m_axi_input_r_WDATA = 32'd0;

assign m_axi_input_r_WID = 1'd0;

assign m_axi_input_r_WLAST = 1'b0;

assign m_axi_input_r_WSTRB = 4'd0;

assign m_axi_input_r_WUSER = 1'd0;

assign m_axi_input_r_WVALID = 1'b0;

assign not_exitcond_flatten_fu_555_p2 = (exitcond_flatten_fu_503_p2 ^ 1'd1);

assign or_cond3_fu_753_p2 = (tmp3_fu_747_p2 | tmp2_fu_735_p2);

assign p_mid1_fu_601_p1 = tr_4_fu_587_p2;

assign p_shl5_cast_fu_643_p3 = {{tmp_191_fu_639_p1}, {2'd0}};

assign p_shl_cast_fu_631_p3 = {{tmp_190_fu_627_p1}, {5'd0}};

assign sext_cast_fu_350_p1 = input_offset;

assign sum_cast_fu_360_p1 = $signed(sum_fu_354_p2);

assign sum_fu_354_p2 = ($signed(tmp_cast_fu_346_p1) + $signed(sext_cast_fu_350_p1));

assign tc_4_fu_815_p2 = (tc_mid2_reg_976 + 31'd1);

assign tc_cast_fu_477_p1 = tc_reg_332;

assign tc_cast_mid2_cast_fu_697_p1 = tc_mid2_fu_593_p3;

assign tc_mid2_fu_593_p3 = ((tmp_52_mid1_fu_580_p3[0:0] === 1'b1) ? tc_mid_fu_516_p3 : 31'd0);

assign tc_mid_fu_516_p3 = ((exitcond_flatten_fu_503_p2[0:0] === 1'b1) ? 31'd0 : tc_reg_332);

assign tmp1_fu_707_p2 = (tmp_52_fu_701_p2 | tmp_49_mid2_fu_662_p3);

assign tmp2_fu_735_p2 = (tmp_53_fu_719_p2 | tmp_50_mid2_fu_676_p3);

assign tmp3_fu_747_p2 = (tmp_54_fu_724_p2 | tmp4_fu_741_p2);

assign tmp4_fu_741_p2 = (tmp_55_fu_730_p2 | tmp_51_mid2_fu_689_p3);

assign tmp_107_fu_463_p1 = tr_reg_321;

assign tmp_108_fu_536_p2 = ((tr_reg_321 == 31'd0) ? 1'b1 : 1'b0);

assign tmp_109_fu_561_p2 = ((tr_reg_321 == 31'd1) ? 1'b1 : 1'b0);

assign tmp_110_fu_651_p2 = (p_shl_cast_fu_631_p3 + p_shl5_cast_fu_643_p3);

assign tmp_111_fu_802_p2 = (tmp_110_reg_988 + tmp_192_fu_799_p1);

assign tmp_112_fu_767_p2 = (tmp_193_fu_764_p1 + tmp_110_reg_988);

assign tmp_122_cast_fu_807_p1 = tmp_111_fu_802_p2;

assign tmp_123_cast_fu_772_p1 = tmp_112_fu_767_p2;

assign tmp_190_fu_627_p1 = tmp_48_mid2_fu_619_p3[6:0];

assign tmp_191_fu_639_p1 = tmp_48_mid2_fu_619_p3[9:0];

assign tmp_192_fu_799_p1 = tc_mid2_reg_976[11:0];

assign tmp_193_fu_764_p1 = tc_mid2_reg_976[11:0];

assign tmp_194_fu_780_p1 = input_tmp_buffer_q0[7:0];

assign tmp_40_fu_392_p2 = (TC + 32'd4);

assign tmp_41_fu_426_p2 = (TR + 32'd2);

assign tmp_42_fu_431_p2 = (TC + 32'd2);

assign tmp_43_fu_436_p2 = (TR + 32'd3);

assign tmp_44_fu_441_p2 = (TC + 32'd3);

assign tmp_47_fu_467_p2 = ((tmp_107_fu_463_p1 == tmp_41_reg_911) ? 1'b1 : 1'b0);

assign tmp_47_mid1_fu_605_p2 = ((tr_4_fu_587_p2 == 31'd0) ? 1'b1 : 1'b0);

assign tmp_47_mid2_fu_611_p3 = ((tmp_52_mid1_fu_580_p3[0:0] === 1'b1) ? tmp_47_mid_fu_542_p2 : tmp_47_mid1_fu_605_p2);

assign tmp_47_mid_fu_542_p2 = (tmp_108_fu_536_p2 | exitcond_flatten_fu_503_p2);

assign tmp_48_mid2_fu_619_p3 = ((tmp_52_mid1_fu_580_p3[0:0] === 1'b1) ? tr_mid_fu_508_p3 : tr_4_fu_587_p2);

assign tmp_49_fu_472_p2 = ((tmp_107_fu_463_p1 == tmp_43_reg_922) ? 1'b1 : 1'b0);

assign tmp_49_mid1_fu_657_p2 = ((p_mid1_fu_601_p1 == tmp_41_reg_911) ? 1'b1 : 1'b0);

assign tmp_49_mid2_fu_662_p3 = ((tmp_52_mid1_fu_580_p3[0:0] === 1'b1) ? tmp_49_mid3_fu_548_p3 : tmp_49_mid1_fu_657_p2);

assign tmp_49_mid3_fu_548_p3 = ((exitcond_flatten_fu_503_p2[0:0] === 1'b1) ? tmp_49_mid_reg_938 : tmp_47_fu_467_p2);

assign tmp_49_mid_fu_446_p2 = ((tmp_41_fu_426_p2 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_50_fu_481_p2 = (($signed(tc_cast_fu_477_p1) < $signed(tmp_40_reg_888)) ? 1'b1 : 1'b0);

assign tmp_50_mid1_fu_670_p2 = ((tr_mid_fu_508_p3 == 31'd0) ? 1'b1 : 1'b0);

assign tmp_50_mid2_fu_676_p3 = ((tmp_52_mid1_fu_580_p3[0:0] === 1'b1) ? tmp_50_mid_fu_567_p2 : tmp_50_mid1_fu_670_p2);

assign tmp_50_mid_fu_567_p2 = (tmp_109_fu_561_p2 & not_exitcond_flatten_fu_555_p2);

assign tmp_51_mid1_fu_684_p2 = ((p_mid1_fu_601_p1 == tmp_43_reg_922) ? 1'b1 : 1'b0);

assign tmp_51_mid2_fu_689_p3 = ((tmp_52_mid1_fu_580_p3[0:0] === 1'b1) ? tmp_51_mid3_fu_573_p3 : tmp_51_mid1_fu_684_p2);

assign tmp_51_mid3_fu_573_p3 = ((exitcond_flatten_fu_503_p2[0:0] === 1'b1) ? tmp_51_mid_reg_943 : tmp_49_fu_472_p2);

assign tmp_51_mid_fu_452_p2 = ((tmp_43_fu_436_p2 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_52_fu_701_p2 = ((tc_mid2_fu_593_p3 == 31'd0) ? 1'b1 : 1'b0);

assign tmp_52_mid1_fu_580_p3 = ((exitcond_flatten_fu_503_p2[0:0] === 1'b1) ? tmp_52_mid_reg_948 : tmp_50_fu_481_p2);

assign tmp_52_mid_fu_458_p2 = (($signed(tmp_40_reg_888) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmp_53_fu_719_p2 = ((tc_cast_mid2_cast_fu_697_p1 == tmp_42_reg_917) ? 1'b1 : 1'b0);

assign tmp_54_fu_724_p2 = ((tc_mid2_fu_593_p3 == 31'd1) ? 1'b1 : 1'b0);

assign tmp_55_fu_730_p2 = ((tc_cast_mid2_cast_fu_697_p1 == tmp_44_reg_928) ? 1'b1 : 1'b0);

assign tmp_58_fu_759_p0 = input_tmp_offset_1_fu_114;

assign tmp_58_fu_759_p1 = tmp_58_fu_759_p0;

assign tmp_cast_fu_346_p1 = $signed(offset);

assign tmp_fu_532_p1 = tn_t7_mid2_v_fu_524_p3[1:0];

assign tmp_s_fu_387_p2 = (TR + 32'd4);

assign tn_2_fu_497_p2 = (31'd1 + tn_reg_298);

assign tn_t7_mid2_v_fu_524_p3 = ((exitcond_flatten_fu_503_p2[0:0] === 1'b1) ? tn_2_fu_497_p2 : tn_reg_298);

assign tr_4_fu_587_p2 = (31'd1 + tr_mid_fu_508_p3);

assign tr_mid_fu_508_p3 = ((exitcond_flatten_fu_503_p2[0:0] === 1'b1) ? 31'd0 : tr_reg_321);

always @ (posedge ap_clk) begin
    tmp_110_reg_988[1:0] <= 2'b00;
end

endmodule //input_load_conv
