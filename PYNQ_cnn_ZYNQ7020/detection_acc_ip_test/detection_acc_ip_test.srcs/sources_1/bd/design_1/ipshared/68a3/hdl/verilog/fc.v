// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_buffer_0_address0,
        input_buffer_0_ce0,
        input_buffer_0_q0,
        input_buffer_1_address0,
        input_buffer_1_ce0,
        input_buffer_1_q0,
        input_buffer_2_address0,
        input_buffer_2_ce0,
        input_buffer_2_q0,
        input_buffer_3_address0,
        input_buffer_3_ce0,
        input_buffer_3_q0,
        input_buffer_4_address0,
        input_buffer_4_ce0,
        input_buffer_4_q0,
        input_buffer_5_address0,
        input_buffer_5_ce0,
        input_buffer_5_q0,
        input_buffer_6_address0,
        input_buffer_6_ce0,
        input_buffer_6_q0,
        input_buffer_7_address0,
        input_buffer_7_ce0,
        input_buffer_7_q0,
        output_buffer_0_address0,
        output_buffer_0_ce0,
        output_buffer_0_we0,
        output_buffer_0_d0,
        output_buffer_0_q0,
        output_buffer_1_address0,
        output_buffer_1_ce0,
        output_buffer_1_we0,
        output_buffer_1_d0,
        output_buffer_1_q0,
        output_buffer_2_address0,
        output_buffer_2_ce0,
        output_buffer_2_we0,
        output_buffer_2_d0,
        output_buffer_2_q0,
        output_buffer_3_address0,
        output_buffer_3_ce0,
        output_buffer_3_we0,
        output_buffer_3_d0,
        output_buffer_3_q0,
        output_buffer_4_address0,
        output_buffer_4_ce0,
        output_buffer_4_we0,
        output_buffer_4_d0,
        output_buffer_4_q0,
        output_buffer_5_address0,
        output_buffer_5_ce0,
        output_buffer_5_we0,
        output_buffer_5_d0,
        output_buffer_5_q0,
        output_buffer_6_address0,
        output_buffer_6_ce0,
        output_buffer_6_we0,
        output_buffer_6_d0,
        output_buffer_6_q0,
        output_buffer_7_address0,
        output_buffer_7_ce0,
        output_buffer_7_we0,
        output_buffer_7_d0,
        output_buffer_7_q0,
        beta_buffer_address0,
        beta_buffer_ce0,
        beta_buffer_q0,
        enable,
        m,
        n,
        weight_buffer_fc_0_address0,
        weight_buffer_fc_0_ce0,
        weight_buffer_fc_0_q0,
        weight_buffer_fc_1_address0,
        weight_buffer_fc_1_ce0,
        weight_buffer_fc_1_q0,
        weight_buffer_fc_2_address0,
        weight_buffer_fc_2_ce0,
        weight_buffer_fc_2_q0,
        weight_buffer_fc_3_address0,
        weight_buffer_fc_3_ce0,
        weight_buffer_fc_3_q0,
        weight_buffer_fc_4_address0,
        weight_buffer_fc_4_ce0,
        weight_buffer_fc_4_q0,
        weight_buffer_fc_5_address0,
        weight_buffer_fc_5_ce0,
        weight_buffer_fc_5_q0,
        weight_buffer_fc_6_address0,
        weight_buffer_fc_6_ce0,
        weight_buffer_fc_6_q0,
        weight_buffer_fc_7_address0,
        weight_buffer_fc_7_ce0,
        weight_buffer_fc_7_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_pp0_stage1 = 5'd4;
parameter    ap_ST_fsm_pp0_stage2 = 5'd8;
parameter    ap_ST_fsm_state7 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] input_buffer_0_address0;
output   input_buffer_0_ce0;
input  [31:0] input_buffer_0_q0;
output  [8:0] input_buffer_1_address0;
output   input_buffer_1_ce0;
input  [31:0] input_buffer_1_q0;
output  [8:0] input_buffer_2_address0;
output   input_buffer_2_ce0;
input  [31:0] input_buffer_2_q0;
output  [8:0] input_buffer_3_address0;
output   input_buffer_3_ce0;
input  [31:0] input_buffer_3_q0;
output  [8:0] input_buffer_4_address0;
output   input_buffer_4_ce0;
input  [31:0] input_buffer_4_q0;
output  [8:0] input_buffer_5_address0;
output   input_buffer_5_ce0;
input  [31:0] input_buffer_5_q0;
output  [8:0] input_buffer_6_address0;
output   input_buffer_6_ce0;
input  [31:0] input_buffer_6_q0;
output  [8:0] input_buffer_7_address0;
output   input_buffer_7_ce0;
input  [31:0] input_buffer_7_q0;
output  [6:0] output_buffer_0_address0;
output   output_buffer_0_ce0;
output   output_buffer_0_we0;
output  [31:0] output_buffer_0_d0;
input  [31:0] output_buffer_0_q0;
output  [6:0] output_buffer_1_address0;
output   output_buffer_1_ce0;
output   output_buffer_1_we0;
output  [31:0] output_buffer_1_d0;
input  [31:0] output_buffer_1_q0;
output  [6:0] output_buffer_2_address0;
output   output_buffer_2_ce0;
output   output_buffer_2_we0;
output  [31:0] output_buffer_2_d0;
input  [31:0] output_buffer_2_q0;
output  [6:0] output_buffer_3_address0;
output   output_buffer_3_ce0;
output   output_buffer_3_we0;
output  [31:0] output_buffer_3_d0;
input  [31:0] output_buffer_3_q0;
output  [6:0] output_buffer_4_address0;
output   output_buffer_4_ce0;
output   output_buffer_4_we0;
output  [31:0] output_buffer_4_d0;
input  [31:0] output_buffer_4_q0;
output  [6:0] output_buffer_5_address0;
output   output_buffer_5_ce0;
output   output_buffer_5_we0;
output  [31:0] output_buffer_5_d0;
input  [31:0] output_buffer_5_q0;
output  [6:0] output_buffer_6_address0;
output   output_buffer_6_ce0;
output   output_buffer_6_we0;
output  [31:0] output_buffer_6_d0;
input  [31:0] output_buffer_6_q0;
output  [6:0] output_buffer_7_address0;
output   output_buffer_7_ce0;
output   output_buffer_7_we0;
output  [31:0] output_buffer_7_d0;
input  [31:0] output_buffer_7_q0;
output  [9:0] beta_buffer_address0;
output   beta_buffer_ce0;
input  [31:0] beta_buffer_q0;
input   enable;
input  [30:0] m;
input  [30:0] n;
output  [8:0] weight_buffer_fc_0_address0;
output   weight_buffer_fc_0_ce0;
input  [31:0] weight_buffer_fc_0_q0;
output  [8:0] weight_buffer_fc_1_address0;
output   weight_buffer_fc_1_ce0;
input  [31:0] weight_buffer_fc_1_q0;
output  [8:0] weight_buffer_fc_2_address0;
output   weight_buffer_fc_2_ce0;
input  [31:0] weight_buffer_fc_2_q0;
output  [8:0] weight_buffer_fc_3_address0;
output   weight_buffer_fc_3_ce0;
input  [31:0] weight_buffer_fc_3_q0;
output  [8:0] weight_buffer_fc_4_address0;
output   weight_buffer_fc_4_ce0;
input  [31:0] weight_buffer_fc_4_q0;
output  [8:0] weight_buffer_fc_5_address0;
output   weight_buffer_fc_5_ce0;
input  [31:0] weight_buffer_fc_5_q0;
output  [8:0] weight_buffer_fc_6_address0;
output   weight_buffer_fc_6_ce0;
input  [31:0] weight_buffer_fc_6_q0;
output  [8:0] weight_buffer_fc_7_address0;
output   weight_buffer_fc_7_ce0;
input  [31:0] weight_buffer_fc_7_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_buffer_0_ce0;
reg input_buffer_1_ce0;
reg input_buffer_2_ce0;
reg input_buffer_3_ce0;
reg input_buffer_4_ce0;
reg input_buffer_5_ce0;
reg input_buffer_6_ce0;
reg input_buffer_7_ce0;
reg output_buffer_0_ce0;
reg output_buffer_0_we0;
reg output_buffer_1_ce0;
reg output_buffer_1_we0;
reg output_buffer_2_ce0;
reg output_buffer_2_we0;
reg output_buffer_3_ce0;
reg output_buffer_3_we0;
reg output_buffer_4_ce0;
reg output_buffer_4_we0;
reg output_buffer_5_ce0;
reg output_buffer_5_we0;
reg output_buffer_6_ce0;
reg output_buffer_6_we0;
reg output_buffer_7_ce0;
reg output_buffer_7_we0;
reg beta_buffer_ce0;
reg weight_buffer_fc_0_ce0;
reg weight_buffer_fc_1_ce0;
reg weight_buffer_fc_2_ce0;
reg weight_buffer_fc_3_ce0;
reg weight_buffer_fc_4_ce0;
reg weight_buffer_fc_5_ce0;
reg weight_buffer_fc_6_ce0;
reg weight_buffer_fc_7_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] i_reg_452;
wire   [0:0] enable_read_read_fu_130_p2;
reg   [9:0] beta_buffer_addr_reg_675;
wire   [2:0] tmp_195_fu_468_p1;
reg   [2:0] tmp_195_reg_680;
wire   [31:0] arrayNo_fu_472_p1;
reg   [31:0] arrayNo_reg_684;
reg   [6:0] output_buffer_0_add_reg_689;
reg   [6:0] output_buffer_1_add_reg_694;
reg   [6:0] output_buffer_2_add_reg_699;
reg   [6:0] output_buffer_3_add_reg_704;
reg   [6:0] output_buffer_4_add_reg_709;
reg   [6:0] output_buffer_5_add_reg_714;
reg   [6:0] output_buffer_6_add_reg_719;
reg   [6:0] output_buffer_7_add_reg_724;
wire   [9:0] tmp_196_fu_498_p1;
reg   [9:0] tmp_196_reg_729;
wire   [0:0] exitcond_fu_502_p2;
reg   [0:0] exitcond_reg_734;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [9:0] i_2_fu_508_p2;
reg   [9:0] i_2_reg_738;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_59_fu_536_p2;
reg   [0:0] tmp_59_reg_743;
reg   [0:0] tmp_59_reg_743_pp0_iter1_reg;
reg   [31:0] tmp_add_result_reg_828;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg  signed [31:0] input_buffer_0_load_reg_833;
reg  signed [31:0] weight_buffer_fc_0_l_reg_838;
reg  signed [31:0] input_buffer_1_load_reg_843;
reg  signed [31:0] weight_buffer_fc_1_l_reg_848;
reg  signed [31:0] input_buffer_2_load_reg_853;
reg  signed [31:0] weight_buffer_fc_2_l_reg_858;
reg  signed [31:0] input_buffer_3_load_reg_863;
reg  signed [31:0] weight_buffer_fc_3_l_reg_868;
reg  signed [31:0] input_buffer_4_load_reg_873;
reg  signed [31:0] weight_buffer_fc_4_l_reg_878;
reg  signed [31:0] input_buffer_5_load_reg_883;
reg  signed [31:0] weight_buffer_fc_5_l_reg_888;
reg  signed [31:0] input_buffer_6_load_reg_893;
reg  signed [31:0] weight_buffer_fc_6_l_reg_898;
reg  signed [31:0] input_buffer_7_load_reg_903;
reg  signed [31:0] weight_buffer_fc_7_l_reg_908;
wire   [31:0] tmp_61_fu_562_p2;
reg   [31:0] tmp_61_reg_913;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] tmp_62_fu_566_p2;
reg   [31:0] tmp_62_reg_918;
wire   [31:0] tmp_63_fu_570_p2;
reg   [31:0] tmp_63_reg_923;
wire   [31:0] tmp_64_fu_574_p2;
reg   [31:0] tmp_64_reg_928;
wire   [31:0] tmp_65_fu_578_p2;
reg   [31:0] tmp_65_reg_933;
wire   [31:0] tmp_66_fu_582_p2;
reg   [31:0] tmp_66_reg_938;
wire   [31:0] tmp_67_fu_586_p2;
reg   [31:0] tmp_67_reg_943;
wire   [31:0] tmp_add_result_1_fu_590_p10;
reg   [31:0] tmp_add_result_1_reg_948;
wire   [31:0] tmp_60_fu_611_p2;
reg   [31:0] tmp_60_reg_953;
wire   [31:0] tmp8_fu_623_p2;
reg   [31:0] tmp8_reg_958;
wire   [31:0] tmp11_fu_633_p2;
reg   [31:0] tmp11_reg_963;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage1_subdone;
reg   [9:0] ap_phi_mux_i_phi_fu_456_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] tmp_fu_463_p1;
wire   [63:0] newIndex1_fu_486_p1;
wire   [63:0] i2_fu_542_p1;
wire    ap_block_pp0_stage2;
wire   [31:0] tmp_68_fu_653_p2;
wire    ap_block_pp0_stage1;
wire   [27:0] newIndex_fu_476_p4;
wire   [20:0] tmp_4_fu_519_p4;
wire   [9:0] tmp_3_fu_514_p2;
wire   [30:0] tmp_s_fu_528_p3;
wire   [31:0] tmp6_fu_615_p2;
wire   [31:0] tmp7_fu_619_p2;
wire   [31:0] tmp10_fu_629_p2;
wire   [31:0] tmp_add_result_2_fu_638_p3;
wire   [31:0] tmp9_fu_643_p2;
wire   [31:0] tmp12_fu_648_p2;
wire    ap_CS_fsm_state7;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

detection_acc_muxjbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
detection_acc_muxjbC_U401(
    .din0(output_buffer_0_q0),
    .din1(output_buffer_1_q0),
    .din2(output_buffer_2_q0),
    .din3(output_buffer_3_q0),
    .din4(output_buffer_4_q0),
    .din5(output_buffer_5_q0),
    .din6(output_buffer_6_q0),
    .din7(output_buffer_7_q0),
    .din8(arrayNo_reg_684),
    .dout(tmp_add_result_1_fu_590_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((enable_read_read_fu_130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((enable_read_read_fu_130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_734 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_452 <= i_2_reg_738;
    end else if (((enable_read_read_fu_130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_452 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((enable_read_read_fu_130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        arrayNo_reg_684[2 : 0] <= arrayNo_fu_472_p1[2 : 0];
        beta_buffer_addr_reg_675 <= tmp_fu_463_p1;
        output_buffer_0_add_reg_689 <= newIndex1_fu_486_p1;
        output_buffer_1_add_reg_694 <= newIndex1_fu_486_p1;
        output_buffer_2_add_reg_699 <= newIndex1_fu_486_p1;
        output_buffer_3_add_reg_704 <= newIndex1_fu_486_p1;
        output_buffer_4_add_reg_709 <= newIndex1_fu_486_p1;
        output_buffer_5_add_reg_714 <= newIndex1_fu_486_p1;
        output_buffer_6_add_reg_719 <= newIndex1_fu_486_p1;
        output_buffer_7_add_reg_724 <= newIndex1_fu_486_p1;
        tmp_195_reg_680 <= tmp_195_fu_468_p1;
        tmp_196_reg_729 <= tmp_196_fu_498_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_reg_734 <= exitcond_fu_502_p2;
        tmp11_reg_963 <= tmp11_fu_633_p2;
        tmp8_reg_958 <= tmp8_fu_623_p2;
        tmp_59_reg_743_pp0_iter1_reg <= tmp_59_reg_743;
        tmp_60_reg_953 <= tmp_60_fu_611_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_2_reg_738 <= i_2_fu_508_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (exitcond_reg_734 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_buffer_0_load_reg_833 <= input_buffer_0_q0;
        input_buffer_1_load_reg_843 <= input_buffer_1_q0;
        input_buffer_2_load_reg_853 <= input_buffer_2_q0;
        input_buffer_3_load_reg_863 <= input_buffer_3_q0;
        input_buffer_4_load_reg_873 <= input_buffer_4_q0;
        input_buffer_5_load_reg_883 <= input_buffer_5_q0;
        input_buffer_6_load_reg_893 <= input_buffer_6_q0;
        input_buffer_7_load_reg_903 <= input_buffer_7_q0;
        tmp_add_result_reg_828 <= beta_buffer_q0;
        weight_buffer_fc_0_l_reg_838 <= weight_buffer_fc_0_q0;
        weight_buffer_fc_1_l_reg_848 <= weight_buffer_fc_1_q0;
        weight_buffer_fc_2_l_reg_858 <= weight_buffer_fc_2_q0;
        weight_buffer_fc_3_l_reg_868 <= weight_buffer_fc_3_q0;
        weight_buffer_fc_4_l_reg_878 <= weight_buffer_fc_4_q0;
        weight_buffer_fc_5_l_reg_888 <= weight_buffer_fc_5_q0;
        weight_buffer_fc_6_l_reg_898 <= weight_buffer_fc_6_q0;
        weight_buffer_fc_7_l_reg_908 <= weight_buffer_fc_7_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_502_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_59_reg_743 <= tmp_59_fu_536_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (exitcond_reg_734 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_61_reg_913 <= tmp_61_fu_562_p2;
        tmp_62_reg_918 <= tmp_62_fu_566_p2;
        tmp_63_reg_923 <= tmp_63_fu_570_p2;
        tmp_64_reg_928 <= tmp_64_fu_574_p2;
        tmp_65_reg_933 <= tmp_65_fu_578_p2;
        tmp_66_reg_938 <= tmp_66_fu_582_p2;
        tmp_67_reg_943 <= tmp_67_fu_586_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_59_reg_743 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_add_result_1_reg_948 <= tmp_add_result_1_fu_590_p10;
    end
end

always @ (*) begin
    if ((exitcond_fu_502_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond_reg_734 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_456_p4 = i_2_reg_738;
    end else begin
        ap_phi_mux_i_phi_fu_456_p4 = i_reg_452;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        beta_buffer_ce0 = 1'b1;
    end else begin
        beta_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_0_ce0 = 1'b1;
    end else begin
        input_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_1_ce0 = 1'b1;
    end else begin
        input_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_2_ce0 = 1'b1;
    end else begin
        input_buffer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_3_ce0 = 1'b1;
    end else begin
        input_buffer_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_4_ce0 = 1'b1;
    end else begin
        input_buffer_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_5_ce0 = 1'b1;
    end else begin
        input_buffer_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_6_ce0 = 1'b1;
    end else begin
        input_buffer_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_7_ce0 = 1'b1;
    end else begin
        input_buffer_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        output_buffer_0_ce0 = 1'b1;
    end else begin
        output_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (tmp_195_reg_680 == 3'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer_0_we0 = 1'b1;
    end else begin
        output_buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        output_buffer_1_ce0 = 1'b1;
    end else begin
        output_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (tmp_195_reg_680 == 3'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer_1_we0 = 1'b1;
    end else begin
        output_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        output_buffer_2_ce0 = 1'b1;
    end else begin
        output_buffer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (tmp_195_reg_680 == 3'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer_2_we0 = 1'b1;
    end else begin
        output_buffer_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        output_buffer_3_ce0 = 1'b1;
    end else begin
        output_buffer_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (tmp_195_reg_680 == 3'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer_3_we0 = 1'b1;
    end else begin
        output_buffer_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        output_buffer_4_ce0 = 1'b1;
    end else begin
        output_buffer_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (tmp_195_reg_680 == 3'd4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer_4_we0 = 1'b1;
    end else begin
        output_buffer_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        output_buffer_5_ce0 = 1'b1;
    end else begin
        output_buffer_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (tmp_195_reg_680 == 3'd5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer_5_we0 = 1'b1;
    end else begin
        output_buffer_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        output_buffer_6_ce0 = 1'b1;
    end else begin
        output_buffer_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (tmp_195_reg_680 == 3'd6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer_6_we0 = 1'b1;
    end else begin
        output_buffer_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        output_buffer_7_ce0 = 1'b1;
    end else begin
        output_buffer_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (tmp_195_reg_680 == 3'd7) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_buffer_7_we0 = 1'b1;
    end else begin
        output_buffer_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_buffer_fc_0_ce0 = 1'b1;
    end else begin
        weight_buffer_fc_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_buffer_fc_1_ce0 = 1'b1;
    end else begin
        weight_buffer_fc_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_buffer_fc_2_ce0 = 1'b1;
    end else begin
        weight_buffer_fc_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_buffer_fc_3_ce0 = 1'b1;
    end else begin
        weight_buffer_fc_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_buffer_fc_4_ce0 = 1'b1;
    end else begin
        weight_buffer_fc_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_buffer_fc_5_ce0 = 1'b1;
    end else begin
        weight_buffer_fc_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_buffer_fc_6_ce0 = 1'b1;
    end else begin
        weight_buffer_fc_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_buffer_fc_7_ce0 = 1'b1;
    end else begin
        weight_buffer_fc_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((enable_read_read_fu_130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((enable_read_read_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_502_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_fu_502_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign arrayNo_fu_472_p1 = tmp_195_fu_468_p1;

assign beta_buffer_address0 = beta_buffer_addr_reg_675;

assign enable_read_read_fu_130_p2 = enable;

assign exitcond_fu_502_p2 = ((ap_phi_mux_i_phi_fu_456_p4 == 10'd512) ? 1'b1 : 1'b0);

assign i2_fu_542_p1 = ap_phi_mux_i_phi_fu_456_p4;

assign i_2_fu_508_p2 = (ap_phi_mux_i_phi_fu_456_p4 + 10'd1);

assign input_buffer_0_address0 = i2_fu_542_p1;

assign input_buffer_1_address0 = i2_fu_542_p1;

assign input_buffer_2_address0 = i2_fu_542_p1;

assign input_buffer_3_address0 = i2_fu_542_p1;

assign input_buffer_4_address0 = i2_fu_542_p1;

assign input_buffer_5_address0 = i2_fu_542_p1;

assign input_buffer_6_address0 = i2_fu_542_p1;

assign input_buffer_7_address0 = i2_fu_542_p1;

assign newIndex1_fu_486_p1 = newIndex_fu_476_p4;

assign newIndex_fu_476_p4 = {{m[30:3]}};

assign output_buffer_0_address0 = output_buffer_0_add_reg_689;

assign output_buffer_0_d0 = tmp_68_fu_653_p2;

assign output_buffer_1_address0 = output_buffer_1_add_reg_694;

assign output_buffer_1_d0 = tmp_68_fu_653_p2;

assign output_buffer_2_address0 = output_buffer_2_add_reg_699;

assign output_buffer_2_d0 = tmp_68_fu_653_p2;

assign output_buffer_3_address0 = output_buffer_3_add_reg_704;

assign output_buffer_3_d0 = tmp_68_fu_653_p2;

assign output_buffer_4_address0 = output_buffer_4_add_reg_709;

assign output_buffer_4_d0 = tmp_68_fu_653_p2;

assign output_buffer_5_address0 = output_buffer_5_add_reg_714;

assign output_buffer_5_d0 = tmp_68_fu_653_p2;

assign output_buffer_6_address0 = output_buffer_6_add_reg_719;

assign output_buffer_6_d0 = tmp_68_fu_653_p2;

assign output_buffer_7_address0 = output_buffer_7_add_reg_724;

assign output_buffer_7_d0 = tmp_68_fu_653_p2;

assign tmp10_fu_629_p2 = (tmp_67_reg_943 + tmp_61_reg_913);

assign tmp11_fu_633_p2 = (tmp_62_reg_918 + tmp10_fu_629_p2);

assign tmp12_fu_648_p2 = (tmp9_fu_643_p2 + tmp11_reg_963);

assign tmp6_fu_615_p2 = (tmp_66_reg_938 + tmp_65_reg_933);

assign tmp7_fu_619_p2 = (tmp_63_reg_923 + tmp_64_reg_928);

assign tmp8_fu_623_p2 = (tmp6_fu_615_p2 + tmp7_fu_619_p2);

assign tmp9_fu_643_p2 = (tmp_60_reg_953 + tmp_add_result_2_fu_638_p3);

assign tmp_195_fu_468_p1 = m[2:0];

assign tmp_196_fu_498_p1 = n[9:0];

assign tmp_3_fu_514_p2 = (tmp_196_reg_729 | ap_phi_mux_i_phi_fu_456_p4);

assign tmp_4_fu_519_p4 = {{n[30:10]}};

assign tmp_59_fu_536_p2 = ((tmp_s_fu_528_p3 == 31'd0) ? 1'b1 : 1'b0);

assign tmp_60_fu_611_p2 = ($signed(input_buffer_0_load_reg_833) * $signed(weight_buffer_fc_0_l_reg_838));

assign tmp_61_fu_562_p2 = ($signed(input_buffer_1_load_reg_843) * $signed(weight_buffer_fc_1_l_reg_848));

assign tmp_62_fu_566_p2 = ($signed(input_buffer_2_load_reg_853) * $signed(weight_buffer_fc_2_l_reg_858));

assign tmp_63_fu_570_p2 = ($signed(input_buffer_3_load_reg_863) * $signed(weight_buffer_fc_3_l_reg_868));

assign tmp_64_fu_574_p2 = ($signed(input_buffer_4_load_reg_873) * $signed(weight_buffer_fc_4_l_reg_878));

assign tmp_65_fu_578_p2 = ($signed(input_buffer_5_load_reg_883) * $signed(weight_buffer_fc_5_l_reg_888));

assign tmp_66_fu_582_p2 = ($signed(input_buffer_6_load_reg_893) * $signed(weight_buffer_fc_6_l_reg_898));

assign tmp_67_fu_586_p2 = ($signed(input_buffer_7_load_reg_903) * $signed(weight_buffer_fc_7_l_reg_908));

assign tmp_68_fu_653_p2 = (tmp8_reg_958 + tmp12_fu_648_p2);

assign tmp_add_result_2_fu_638_p3 = ((tmp_59_reg_743_pp0_iter1_reg[0:0] === 1'b1) ? tmp_add_result_reg_828 : tmp_add_result_1_reg_948);

assign tmp_fu_463_p1 = m;

assign tmp_s_fu_528_p3 = {{tmp_4_fu_519_p4}, {tmp_3_fu_514_p2}};

assign weight_buffer_fc_0_address0 = i2_fu_542_p1;

assign weight_buffer_fc_1_address0 = i2_fu_542_p1;

assign weight_buffer_fc_2_address0 = i2_fu_542_p1;

assign weight_buffer_fc_3_address0 = i2_fu_542_p1;

assign weight_buffer_fc_4_address0 = i2_fu_542_p1;

assign weight_buffer_fc_5_address0 = i2_fu_542_p1;

assign weight_buffer_fc_6_address0 = i2_fu_542_p1;

assign weight_buffer_fc_7_address0 = i2_fu_542_p1;

always @ (posedge ap_clk) begin
    arrayNo_reg_684[31:3] <= 29'b00000000000000000000000000000;
end

endmodule //fc
