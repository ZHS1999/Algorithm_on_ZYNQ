// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module weight_load_fc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_buffer_fc_0_address0,
        weight_buffer_fc_0_ce0,
        weight_buffer_fc_0_we0,
        weight_buffer_fc_0_d0,
        weight_buffer_fc_1_address0,
        weight_buffer_fc_1_ce0,
        weight_buffer_fc_1_we0,
        weight_buffer_fc_1_d0,
        weight_buffer_fc_2_address0,
        weight_buffer_fc_2_ce0,
        weight_buffer_fc_2_we0,
        weight_buffer_fc_2_d0,
        weight_buffer_fc_3_address0,
        weight_buffer_fc_3_ce0,
        weight_buffer_fc_3_we0,
        weight_buffer_fc_3_d0,
        weight_buffer_fc_4_address0,
        weight_buffer_fc_4_ce0,
        weight_buffer_fc_4_we0,
        weight_buffer_fc_4_d0,
        weight_buffer_fc_5_address0,
        weight_buffer_fc_5_ce0,
        weight_buffer_fc_5_we0,
        weight_buffer_fc_5_d0,
        weight_buffer_fc_6_address0,
        weight_buffer_fc_6_ce0,
        weight_buffer_fc_6_we0,
        weight_buffer_fc_6_d0,
        weight_buffer_fc_7_address0,
        weight_buffer_fc_7_ce0,
        weight_buffer_fc_7_we0,
        weight_buffer_fc_7_d0,
        m_axi_Weight_AWVALID,
        m_axi_Weight_AWREADY,
        m_axi_Weight_AWADDR,
        m_axi_Weight_AWID,
        m_axi_Weight_AWLEN,
        m_axi_Weight_AWSIZE,
        m_axi_Weight_AWBURST,
        m_axi_Weight_AWLOCK,
        m_axi_Weight_AWCACHE,
        m_axi_Weight_AWPROT,
        m_axi_Weight_AWQOS,
        m_axi_Weight_AWREGION,
        m_axi_Weight_AWUSER,
        m_axi_Weight_WVALID,
        m_axi_Weight_WREADY,
        m_axi_Weight_WDATA,
        m_axi_Weight_WSTRB,
        m_axi_Weight_WLAST,
        m_axi_Weight_WID,
        m_axi_Weight_WUSER,
        m_axi_Weight_ARVALID,
        m_axi_Weight_ARREADY,
        m_axi_Weight_ARADDR,
        m_axi_Weight_ARID,
        m_axi_Weight_ARLEN,
        m_axi_Weight_ARSIZE,
        m_axi_Weight_ARBURST,
        m_axi_Weight_ARLOCK,
        m_axi_Weight_ARCACHE,
        m_axi_Weight_ARPROT,
        m_axi_Weight_ARQOS,
        m_axi_Weight_ARREGION,
        m_axi_Weight_ARUSER,
        m_axi_Weight_RVALID,
        m_axi_Weight_RREADY,
        m_axi_Weight_RDATA,
        m_axi_Weight_RLAST,
        m_axi_Weight_RID,
        m_axi_Weight_RUSER,
        m_axi_Weight_RRESP,
        m_axi_Weight_BVALID,
        m_axi_Weight_BREADY,
        m_axi_Weight_BRESP,
        m_axi_Weight_BID,
        m_axi_Weight_BUSER,
        Weight_offset,
        offset,
        enable
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_pp0_stage0 = 10'd256;
parameter    ap_ST_fsm_state12 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] weight_buffer_fc_0_address0;
output   weight_buffer_fc_0_ce0;
output   weight_buffer_fc_0_we0;
output  [31:0] weight_buffer_fc_0_d0;
output  [8:0] weight_buffer_fc_1_address0;
output   weight_buffer_fc_1_ce0;
output   weight_buffer_fc_1_we0;
output  [31:0] weight_buffer_fc_1_d0;
output  [8:0] weight_buffer_fc_2_address0;
output   weight_buffer_fc_2_ce0;
output   weight_buffer_fc_2_we0;
output  [31:0] weight_buffer_fc_2_d0;
output  [8:0] weight_buffer_fc_3_address0;
output   weight_buffer_fc_3_ce0;
output   weight_buffer_fc_3_we0;
output  [31:0] weight_buffer_fc_3_d0;
output  [8:0] weight_buffer_fc_4_address0;
output   weight_buffer_fc_4_ce0;
output   weight_buffer_fc_4_we0;
output  [31:0] weight_buffer_fc_4_d0;
output  [8:0] weight_buffer_fc_5_address0;
output   weight_buffer_fc_5_ce0;
output   weight_buffer_fc_5_we0;
output  [31:0] weight_buffer_fc_5_d0;
output  [8:0] weight_buffer_fc_6_address0;
output   weight_buffer_fc_6_ce0;
output   weight_buffer_fc_6_we0;
output  [31:0] weight_buffer_fc_6_d0;
output  [8:0] weight_buffer_fc_7_address0;
output   weight_buffer_fc_7_ce0;
output   weight_buffer_fc_7_we0;
output  [31:0] weight_buffer_fc_7_d0;
output   m_axi_Weight_AWVALID;
input   m_axi_Weight_AWREADY;
output  [31:0] m_axi_Weight_AWADDR;
output  [0:0] m_axi_Weight_AWID;
output  [31:0] m_axi_Weight_AWLEN;
output  [2:0] m_axi_Weight_AWSIZE;
output  [1:0] m_axi_Weight_AWBURST;
output  [1:0] m_axi_Weight_AWLOCK;
output  [3:0] m_axi_Weight_AWCACHE;
output  [2:0] m_axi_Weight_AWPROT;
output  [3:0] m_axi_Weight_AWQOS;
output  [3:0] m_axi_Weight_AWREGION;
output  [0:0] m_axi_Weight_AWUSER;
output   m_axi_Weight_WVALID;
input   m_axi_Weight_WREADY;
output  [31:0] m_axi_Weight_WDATA;
output  [3:0] m_axi_Weight_WSTRB;
output   m_axi_Weight_WLAST;
output  [0:0] m_axi_Weight_WID;
output  [0:0] m_axi_Weight_WUSER;
output   m_axi_Weight_ARVALID;
input   m_axi_Weight_ARREADY;
output  [31:0] m_axi_Weight_ARADDR;
output  [0:0] m_axi_Weight_ARID;
output  [31:0] m_axi_Weight_ARLEN;
output  [2:0] m_axi_Weight_ARSIZE;
output  [1:0] m_axi_Weight_ARBURST;
output  [1:0] m_axi_Weight_ARLOCK;
output  [3:0] m_axi_Weight_ARCACHE;
output  [2:0] m_axi_Weight_ARPROT;
output  [3:0] m_axi_Weight_ARQOS;
output  [3:0] m_axi_Weight_ARREGION;
output  [0:0] m_axi_Weight_ARUSER;
input   m_axi_Weight_RVALID;
output   m_axi_Weight_RREADY;
input  [31:0] m_axi_Weight_RDATA;
input   m_axi_Weight_RLAST;
input  [0:0] m_axi_Weight_RID;
input  [0:0] m_axi_Weight_RUSER;
input  [1:0] m_axi_Weight_RRESP;
input   m_axi_Weight_BVALID;
output   m_axi_Weight_BREADY;
input  [1:0] m_axi_Weight_BRESP;
input  [0:0] m_axi_Weight_BID;
input  [0:0] m_axi_Weight_BUSER;
input  [29:0] Weight_offset;
input  [31:0] offset;
input   enable;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_buffer_fc_0_ce0;
reg weight_buffer_fc_0_we0;
reg weight_buffer_fc_1_ce0;
reg weight_buffer_fc_1_we0;
reg weight_buffer_fc_2_ce0;
reg weight_buffer_fc_2_we0;
reg weight_buffer_fc_3_ce0;
reg weight_buffer_fc_3_we0;
reg weight_buffer_fc_4_ce0;
reg weight_buffer_fc_4_we0;
reg weight_buffer_fc_5_ce0;
reg weight_buffer_fc_5_we0;
reg weight_buffer_fc_6_ce0;
reg weight_buffer_fc_6_we0;
reg weight_buffer_fc_7_ce0;
reg weight_buffer_fc_7_we0;
reg m_axi_Weight_ARVALID;
reg m_axi_Weight_RREADY;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    Weight_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    Weight_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [12:0] indvar_reg_234;
wire   [0:0] enable_read_read_fu_100_p2;
reg   [31:0] Weight_addr_reg_310;
wire   [0:0] exitcond_fu_269_p2;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [12:0] indvar_next_fu_275_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] tmp_fu_281_p1;
reg   [2:0] tmp_reg_325;
reg   [2:0] tmp_reg_325_pp0_iter1_reg;
reg   [9:0] newIndex_reg_329;
reg   [9:0] newIndex_reg_329_pp0_iter1_reg;
reg   [31:0] Weight_addr_read_reg_334;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire   [63:0] newIndex8_fu_295_p1;
wire  signed [63:0] sum_cast_fu_259_p1;
reg    ap_reg_ioackin_m_axi_Weight_ARREADY;
reg    ap_sig_ioackin_m_axi_Weight_ARREADY;
wire  signed [32:0] tmp_1_cast_fu_245_p1;
wire   [32:0] sext_cast_fu_249_p1;
wire   [32:0] sum_fu_253_p2;
wire    ap_CS_fsm_state12;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_reg_ioackin_m_axi_Weight_ARREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_Weight_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if ((ap_sig_ioackin_m_axi_Weight_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_Weight_ARREADY <= 1'b0;
            end else if ((m_axi_Weight_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_Weight_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_269_p2 == 1'd0))) begin
        indvar_reg_234 <= indvar_next_fu_275_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_reg_234 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Weight_addr_read_reg_334 <= m_axi_Weight_RDATA;
        newIndex_reg_329_pp0_iter1_reg <= newIndex_reg_329;
        tmp_reg_325_pp0_iter1_reg <= tmp_reg_325;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (enable_read_read_fu_100_p2 == 1'd1) & (ap_start == 1'b1))) begin
        Weight_addr_reg_310 <= sum_cast_fu_259_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_269_p2 == 1'd0))) begin
        newIndex_reg_329 <= {{indvar_reg_234[12:3]}};
        tmp_reg_325 <= tmp_fu_281_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Weight_blk_n_AR = m_axi_Weight_ARREADY;
    end else begin
        Weight_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        Weight_blk_n_R = m_axi_Weight_RVALID;
    end else begin
        Weight_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond_fu_269_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_Weight_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_Weight_ARREADY = m_axi_Weight_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_Weight_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_Weight_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_Weight_ARVALID = 1'b1;
    end else begin
        m_axi_Weight_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_Weight_RREADY = 1'b1;
    end else begin
        m_axi_Weight_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_fc_0_ce0 = 1'b1;
    end else begin
        weight_buffer_fc_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_325_pp0_iter1_reg == 3'd0))) begin
        weight_buffer_fc_0_we0 = 1'b1;
    end else begin
        weight_buffer_fc_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_fc_1_ce0 = 1'b1;
    end else begin
        weight_buffer_fc_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_reg_325_pp0_iter1_reg == 3'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_fc_1_we0 = 1'b1;
    end else begin
        weight_buffer_fc_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_fc_2_ce0 = 1'b1;
    end else begin
        weight_buffer_fc_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_reg_325_pp0_iter1_reg == 3'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_fc_2_we0 = 1'b1;
    end else begin
        weight_buffer_fc_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_fc_3_ce0 = 1'b1;
    end else begin
        weight_buffer_fc_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_reg_325_pp0_iter1_reg == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_fc_3_we0 = 1'b1;
    end else begin
        weight_buffer_fc_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_fc_4_ce0 = 1'b1;
    end else begin
        weight_buffer_fc_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_reg_325_pp0_iter1_reg == 3'd4) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_fc_4_we0 = 1'b1;
    end else begin
        weight_buffer_fc_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_fc_5_ce0 = 1'b1;
    end else begin
        weight_buffer_fc_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_reg_325_pp0_iter1_reg == 3'd5) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_fc_5_we0 = 1'b1;
    end else begin
        weight_buffer_fc_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_fc_6_ce0 = 1'b1;
    end else begin
        weight_buffer_fc_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_reg_325_pp0_iter1_reg == 3'd6) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_fc_6_we0 = 1'b1;
    end else begin
        weight_buffer_fc_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_fc_7_ce0 = 1'b1;
    end else begin
        weight_buffer_fc_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_reg_325_pp0_iter1_reg == 3'd7) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_buffer_fc_7_we0 = 1'b1;
    end else begin
        weight_buffer_fc_7_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (enable_read_read_fu_100_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((1'b1 == ap_CS_fsm_state1) & (enable_read_read_fu_100_p2 == 1'd1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_sig_ioackin_m_axi_Weight_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_fu_269_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_fu_269_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_Weight_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_Weight_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = (m_axi_Weight_RVALID == 1'b0);
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign enable_read_read_fu_100_p2 = enable;

assign exitcond_fu_269_p2 = ((indvar_reg_234 == 13'd4096) ? 1'b1 : 1'b0);

assign indvar_next_fu_275_p2 = (indvar_reg_234 + 13'd1);

assign m_axi_Weight_ARADDR = Weight_addr_reg_310;

assign m_axi_Weight_ARBURST = 2'd0;

assign m_axi_Weight_ARCACHE = 4'd0;

assign m_axi_Weight_ARID = 1'd0;

assign m_axi_Weight_ARLEN = 32'd4096;

assign m_axi_Weight_ARLOCK = 2'd0;

assign m_axi_Weight_ARPROT = 3'd0;

assign m_axi_Weight_ARQOS = 4'd0;

assign m_axi_Weight_ARREGION = 4'd0;

assign m_axi_Weight_ARSIZE = 3'd0;

assign m_axi_Weight_ARUSER = 1'd0;

assign m_axi_Weight_AWADDR = 32'd0;

assign m_axi_Weight_AWBURST = 2'd0;

assign m_axi_Weight_AWCACHE = 4'd0;

assign m_axi_Weight_AWID = 1'd0;

assign m_axi_Weight_AWLEN = 32'd0;

assign m_axi_Weight_AWLOCK = 2'd0;

assign m_axi_Weight_AWPROT = 3'd0;

assign m_axi_Weight_AWQOS = 4'd0;

assign m_axi_Weight_AWREGION = 4'd0;

assign m_axi_Weight_AWSIZE = 3'd0;

assign m_axi_Weight_AWUSER = 1'd0;

assign m_axi_Weight_AWVALID = 1'b0;

assign m_axi_Weight_BREADY = 1'b0;

assign m_axi_Weight_WDATA = 32'd0;

assign m_axi_Weight_WID = 1'd0;

assign m_axi_Weight_WLAST = 1'b0;

assign m_axi_Weight_WSTRB = 4'd0;

assign m_axi_Weight_WUSER = 1'd0;

assign m_axi_Weight_WVALID = 1'b0;

assign newIndex8_fu_295_p1 = newIndex_reg_329_pp0_iter1_reg;

assign sext_cast_fu_249_p1 = Weight_offset;

assign sum_cast_fu_259_p1 = $signed(sum_fu_253_p2);

assign sum_fu_253_p2 = ($signed(tmp_1_cast_fu_245_p1) + $signed(sext_cast_fu_249_p1));

assign tmp_1_cast_fu_245_p1 = $signed(offset);

assign tmp_fu_281_p1 = indvar_reg_234[2:0];

assign weight_buffer_fc_0_address0 = newIndex8_fu_295_p1;

assign weight_buffer_fc_0_d0 = Weight_addr_read_reg_334;

assign weight_buffer_fc_1_address0 = newIndex8_fu_295_p1;

assign weight_buffer_fc_1_d0 = Weight_addr_read_reg_334;

assign weight_buffer_fc_2_address0 = newIndex8_fu_295_p1;

assign weight_buffer_fc_2_d0 = Weight_addr_read_reg_334;

assign weight_buffer_fc_3_address0 = newIndex8_fu_295_p1;

assign weight_buffer_fc_3_d0 = Weight_addr_read_reg_334;

assign weight_buffer_fc_4_address0 = newIndex8_fu_295_p1;

assign weight_buffer_fc_4_d0 = Weight_addr_read_reg_334;

assign weight_buffer_fc_5_address0 = newIndex8_fu_295_p1;

assign weight_buffer_fc_5_d0 = Weight_addr_read_reg_334;

assign weight_buffer_fc_6_address0 = newIndex8_fu_295_p1;

assign weight_buffer_fc_6_d0 = Weight_addr_read_reg_334;

assign weight_buffer_fc_7_address0 = newIndex8_fu_295_p1;

assign weight_buffer_fc_7_d0 = Weight_addr_read_reg_334;

endmodule //weight_load_fc
