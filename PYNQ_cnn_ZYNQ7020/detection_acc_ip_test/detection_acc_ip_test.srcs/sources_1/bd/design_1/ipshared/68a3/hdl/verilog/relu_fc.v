// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module relu_fc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        enable,
        M,
        output_buffer_fc_0_address0,
        output_buffer_fc_0_ce0,
        output_buffer_fc_0_we0,
        output_buffer_fc_0_d0,
        output_buffer_fc_0_q0,
        output_buffer_fc_1_address0,
        output_buffer_fc_1_ce0,
        output_buffer_fc_1_we0,
        output_buffer_fc_1_d0,
        output_buffer_fc_1_q0,
        output_buffer_fc_2_address0,
        output_buffer_fc_2_ce0,
        output_buffer_fc_2_we0,
        output_buffer_fc_2_d0,
        output_buffer_fc_2_q0,
        output_buffer_fc_3_address0,
        output_buffer_fc_3_ce0,
        output_buffer_fc_3_we0,
        output_buffer_fc_3_d0,
        output_buffer_fc_3_q0,
        output_buffer_fc_4_address0,
        output_buffer_fc_4_ce0,
        output_buffer_fc_4_we0,
        output_buffer_fc_4_d0,
        output_buffer_fc_4_q0,
        output_buffer_fc_5_address0,
        output_buffer_fc_5_ce0,
        output_buffer_fc_5_we0,
        output_buffer_fc_5_d0,
        output_buffer_fc_5_q0,
        output_buffer_fc_6_address0,
        output_buffer_fc_6_ce0,
        output_buffer_fc_6_we0,
        output_buffer_fc_6_d0,
        output_buffer_fc_6_q0,
        output_buffer_fc_7_address0,
        output_buffer_fc_7_ce0,
        output_buffer_fc_7_we0,
        output_buffer_fc_7_d0,
        output_buffer_fc_7_q0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   enable;
input  [31:0] M;
output  [6:0] output_buffer_fc_0_address0;
output   output_buffer_fc_0_ce0;
output   output_buffer_fc_0_we0;
output  [31:0] output_buffer_fc_0_d0;
input  [31:0] output_buffer_fc_0_q0;
output  [6:0] output_buffer_fc_1_address0;
output   output_buffer_fc_1_ce0;
output   output_buffer_fc_1_we0;
output  [31:0] output_buffer_fc_1_d0;
input  [31:0] output_buffer_fc_1_q0;
output  [6:0] output_buffer_fc_2_address0;
output   output_buffer_fc_2_ce0;
output   output_buffer_fc_2_we0;
output  [31:0] output_buffer_fc_2_d0;
input  [31:0] output_buffer_fc_2_q0;
output  [6:0] output_buffer_fc_3_address0;
output   output_buffer_fc_3_ce0;
output   output_buffer_fc_3_we0;
output  [31:0] output_buffer_fc_3_d0;
input  [31:0] output_buffer_fc_3_q0;
output  [6:0] output_buffer_fc_4_address0;
output   output_buffer_fc_4_ce0;
output   output_buffer_fc_4_we0;
output  [31:0] output_buffer_fc_4_d0;
input  [31:0] output_buffer_fc_4_q0;
output  [6:0] output_buffer_fc_5_address0;
output   output_buffer_fc_5_ce0;
output   output_buffer_fc_5_we0;
output  [31:0] output_buffer_fc_5_d0;
input  [31:0] output_buffer_fc_5_q0;
output  [6:0] output_buffer_fc_6_address0;
output   output_buffer_fc_6_ce0;
output   output_buffer_fc_6_we0;
output  [31:0] output_buffer_fc_6_d0;
input  [31:0] output_buffer_fc_6_q0;
output  [6:0] output_buffer_fc_7_address0;
output   output_buffer_fc_7_ce0;
output   output_buffer_fc_7_we0;
output  [31:0] output_buffer_fc_7_d0;
input  [31:0] output_buffer_fc_7_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] output_buffer_fc_0_address0;
reg output_buffer_fc_0_ce0;
reg output_buffer_fc_0_we0;
reg[6:0] output_buffer_fc_1_address0;
reg output_buffer_fc_1_ce0;
reg output_buffer_fc_1_we0;
reg[6:0] output_buffer_fc_2_address0;
reg output_buffer_fc_2_ce0;
reg output_buffer_fc_2_we0;
reg[6:0] output_buffer_fc_3_address0;
reg output_buffer_fc_3_ce0;
reg output_buffer_fc_3_we0;
reg[6:0] output_buffer_fc_4_address0;
reg output_buffer_fc_4_ce0;
reg output_buffer_fc_4_we0;
reg[6:0] output_buffer_fc_5_address0;
reg output_buffer_fc_5_ce0;
reg output_buffer_fc_5_we0;
reg[6:0] output_buffer_fc_6_address0;
reg output_buffer_fc_6_ce0;
reg output_buffer_fc_6_we0;
reg[6:0] output_buffer_fc_7_address0;
reg output_buffer_fc_7_ce0;
reg output_buffer_fc_7_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] enable_read_read_fu_84_p2;
wire   [7:0] i_1_fu_222_p2;
reg   [7:0] i_1_reg_357;
wire    ap_CS_fsm_state2;
wire   [9:0] tmp_fu_232_p3;
reg   [9:0] tmp_reg_362;
wire   [0:0] exitcond1_fu_216_p2;
wire   [3:0] j_1_fu_250_p2;
reg   [3:0] j_1_reg_370;
wire    ap_CS_fsm_state3;
wire   [2:0] tmp_21_fu_256_p1;
reg   [2:0] tmp_21_reg_375;
wire   [0:0] exitcond_fu_244_p2;
reg   [6:0] output_buffer_fc_0_a_reg_380;
reg   [6:0] output_buffer_fc_1_a_reg_385;
reg   [6:0] output_buffer_fc_2_a_reg_390;
reg   [6:0] output_buffer_fc_3_a_reg_395;
reg   [6:0] output_buffer_fc_4_a_reg_400;
reg   [6:0] output_buffer_fc_5_a_reg_405;
reg   [6:0] output_buffer_fc_6_a_reg_410;
reg   [6:0] output_buffer_fc_7_a_reg_415;
wire  signed [31:0] tmp_1_fu_290_p10;
reg  signed [31:0] tmp_1_reg_420;
wire    ap_CS_fsm_state4;
reg   [0:0] tmp_22_reg_425;
wire  signed [31:0] storemerge_cast_fu_341_p1;
reg  signed [31:0] storemerge_cast_reg_430;
wire    ap_CS_fsm_state5;
reg   [7:0] i_reg_194;
reg   [3:0] j_reg_205;
wire    ap_CS_fsm_state6;
wire   [63:0] newIndex8_fu_275_p1;
wire   [6:0] tmp_20_fu_228_p1;
wire   [9:0] j_cast2_fu_240_p1;
wire   [9:0] k_fu_260_p2;
wire   [6:0] newIndex_fu_265_p4;
wire   [31:0] tmp_1_fu_290_p9;
wire  signed [31:0] tmp_13_fu_320_p0;
wire   [31:0] tmp_13_fu_320_p2;
wire   [15:0] tmp_14_fu_324_p4;
wire   [15:0] storemerge_fu_334_p3;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

detection_acc_muxjbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
detection_acc_muxjbC_U544(
    .din0(output_buffer_fc_0_q0),
    .din1(output_buffer_fc_1_q0),
    .din2(output_buffer_fc_2_q0),
    .din3(output_buffer_fc_3_q0),
    .din4(output_buffer_fc_4_q0),
    .din5(output_buffer_fc_5_q0),
    .din6(output_buffer_fc_6_q0),
    .din7(output_buffer_fc_7_q0),
    .din8(tmp_1_fu_290_p9),
    .dout(tmp_1_fu_290_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((enable_read_read_fu_84_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_194 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_244_p2 == 1'd1))) begin
        i_reg_194 <= i_1_reg_357;
    end
end

always @ (posedge ap_clk) begin
    if (((enable_read_read_fu_84_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_216_p2 == 1'd0))) begin
        j_reg_205 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_205 <= j_1_reg_370;
    end
end

always @ (posedge ap_clk) begin
    if (((enable_read_read_fu_84_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_357 <= i_1_fu_222_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_370 <= j_1_fu_250_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_244_p2 == 1'd0))) begin
        output_buffer_fc_0_a_reg_380 <= newIndex8_fu_275_p1;
        output_buffer_fc_1_a_reg_385 <= newIndex8_fu_275_p1;
        output_buffer_fc_2_a_reg_390 <= newIndex8_fu_275_p1;
        output_buffer_fc_3_a_reg_395 <= newIndex8_fu_275_p1;
        output_buffer_fc_4_a_reg_400 <= newIndex8_fu_275_p1;
        output_buffer_fc_5_a_reg_405 <= newIndex8_fu_275_p1;
        output_buffer_fc_6_a_reg_410 <= newIndex8_fu_275_p1;
        output_buffer_fc_7_a_reg_415 <= newIndex8_fu_275_p1;
        tmp_21_reg_375 <= tmp_21_fu_256_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        storemerge_cast_reg_430 <= storemerge_cast_fu_341_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_1_reg_420 <= tmp_1_fu_290_p10;
        tmp_22_reg_425 <= tmp_1_fu_290_p10[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((enable_read_read_fu_84_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_216_p2 == 1'd0))) begin
        tmp_reg_362[9 : 3] <= tmp_fu_232_p3[9 : 3];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & ((enable_read_read_fu_84_p2 == 1'd0) | (exitcond1_fu_216_p2 == 1'd1))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((enable_read_read_fu_84_p2 == 1'd0) | (exitcond1_fu_216_p2 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_buffer_fc_0_address0 = output_buffer_fc_0_a_reg_380;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_buffer_fc_0_address0 = newIndex8_fu_275_p1;
    end else begin
        output_buffer_fc_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        output_buffer_fc_0_ce0 = 1'b1;
    end else begin
        output_buffer_fc_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_21_reg_375 == 3'd0))) begin
        output_buffer_fc_0_we0 = 1'b1;
    end else begin
        output_buffer_fc_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_buffer_fc_1_address0 = output_buffer_fc_1_a_reg_385;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_buffer_fc_1_address0 = newIndex8_fu_275_p1;
    end else begin
        output_buffer_fc_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        output_buffer_fc_1_ce0 = 1'b1;
    end else begin
        output_buffer_fc_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_21_reg_375 == 3'd1))) begin
        output_buffer_fc_1_we0 = 1'b1;
    end else begin
        output_buffer_fc_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_buffer_fc_2_address0 = output_buffer_fc_2_a_reg_390;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_buffer_fc_2_address0 = newIndex8_fu_275_p1;
    end else begin
        output_buffer_fc_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        output_buffer_fc_2_ce0 = 1'b1;
    end else begin
        output_buffer_fc_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_21_reg_375 == 3'd2))) begin
        output_buffer_fc_2_we0 = 1'b1;
    end else begin
        output_buffer_fc_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_buffer_fc_3_address0 = output_buffer_fc_3_a_reg_395;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_buffer_fc_3_address0 = newIndex8_fu_275_p1;
    end else begin
        output_buffer_fc_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        output_buffer_fc_3_ce0 = 1'b1;
    end else begin
        output_buffer_fc_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_21_reg_375 == 3'd3))) begin
        output_buffer_fc_3_we0 = 1'b1;
    end else begin
        output_buffer_fc_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_buffer_fc_4_address0 = output_buffer_fc_4_a_reg_400;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_buffer_fc_4_address0 = newIndex8_fu_275_p1;
    end else begin
        output_buffer_fc_4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        output_buffer_fc_4_ce0 = 1'b1;
    end else begin
        output_buffer_fc_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_21_reg_375 == 3'd4))) begin
        output_buffer_fc_4_we0 = 1'b1;
    end else begin
        output_buffer_fc_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_buffer_fc_5_address0 = output_buffer_fc_5_a_reg_405;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_buffer_fc_5_address0 = newIndex8_fu_275_p1;
    end else begin
        output_buffer_fc_5_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        output_buffer_fc_5_ce0 = 1'b1;
    end else begin
        output_buffer_fc_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_21_reg_375 == 3'd5))) begin
        output_buffer_fc_5_we0 = 1'b1;
    end else begin
        output_buffer_fc_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_buffer_fc_6_address0 = output_buffer_fc_6_a_reg_410;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_buffer_fc_6_address0 = newIndex8_fu_275_p1;
    end else begin
        output_buffer_fc_6_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        output_buffer_fc_6_ce0 = 1'b1;
    end else begin
        output_buffer_fc_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_21_reg_375 == 3'd6))) begin
        output_buffer_fc_6_we0 = 1'b1;
    end else begin
        output_buffer_fc_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_buffer_fc_7_address0 = output_buffer_fc_7_a_reg_415;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_buffer_fc_7_address0 = newIndex8_fu_275_p1;
    end else begin
        output_buffer_fc_7_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        output_buffer_fc_7_ce0 = 1'b1;
    end else begin
        output_buffer_fc_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_21_reg_375 == 3'd7))) begin
        output_buffer_fc_7_we0 = 1'b1;
    end else begin
        output_buffer_fc_7_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ((enable_read_read_fu_84_p2 == 1'd0) | (exitcond1_fu_216_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_244_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign enable_read_read_fu_84_p2 = enable;

assign exitcond1_fu_216_p2 = ((i_reg_194 == 8'd128) ? 1'b1 : 1'b0);

assign exitcond_fu_244_p2 = ((j_reg_205 == 4'd8) ? 1'b1 : 1'b0);

assign i_1_fu_222_p2 = (i_reg_194 + 8'd1);

assign j_1_fu_250_p2 = (j_reg_205 + 4'd1);

assign j_cast2_fu_240_p1 = j_reg_205;

assign k_fu_260_p2 = (j_cast2_fu_240_p1 + tmp_reg_362);

assign newIndex8_fu_275_p1 = newIndex_fu_265_p4;

assign newIndex_fu_265_p4 = {{k_fu_260_p2[9:3]}};

assign output_buffer_fc_0_d0 = storemerge_cast_reg_430;

assign output_buffer_fc_1_d0 = storemerge_cast_reg_430;

assign output_buffer_fc_2_d0 = storemerge_cast_reg_430;

assign output_buffer_fc_3_d0 = storemerge_cast_reg_430;

assign output_buffer_fc_4_d0 = storemerge_cast_reg_430;

assign output_buffer_fc_5_d0 = storemerge_cast_reg_430;

assign output_buffer_fc_6_d0 = storemerge_cast_reg_430;

assign output_buffer_fc_7_d0 = storemerge_cast_reg_430;

assign storemerge_cast_fu_341_p1 = $signed(storemerge_fu_334_p3);

assign storemerge_fu_334_p3 = ((tmp_22_reg_425[0:0] === 1'b1) ? 16'd0 : tmp_14_fu_324_p4);

assign tmp_13_fu_320_p0 = M;

assign tmp_13_fu_320_p2 = ($signed(tmp_13_fu_320_p0) * $signed(tmp_1_reg_420));

assign tmp_14_fu_324_p4 = {{tmp_13_fu_320_p2[31:16]}};

assign tmp_1_fu_290_p9 = tmp_21_reg_375;

assign tmp_20_fu_228_p1 = i_reg_194[6:0];

assign tmp_21_fu_256_p1 = j_reg_205[2:0];

assign tmp_fu_232_p3 = {{tmp_20_fu_228_p1}, {3'd0}};

always @ (posedge ap_clk) begin
    tmp_reg_362[2:0] <= 3'b000;
end

endmodule //relu_fc
